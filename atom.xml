<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ReyesMeng&#39;s Blog</title>
  
  <subtitle>Vaya con Dios.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://callmemengmeng.github.io/"/>
  <updated>2020-04-21T04:16:02.934Z</updated>
  <id>https://callmemengmeng.github.io/</id>
  
  <author>
    <name>ReyesMeng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>常用的四种位移指令</title>
    <link href="https://callmemengmeng.github.io/2020/04/20/Shift-Commands/"/>
    <id>https://callmemengmeng.github.io/2020/04/20/Shift-Commands/</id>
    <published>2020-04-20T10:31:59.000Z</published>
    <updated>2020-04-21T04:16:02.934Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><hr><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>前面<a href="https://callmemengmeng.github.io/2020/04/07/%E6%B1%87%E7%BC%96%EF%BC%9F%E4%B8%8D%E4%BC%9A%E7%BC%96%EF%BC%9F%E4%BC%9A%E4%B8%8D%E6%B1%87%E7%BC%96%EF%BC%9F/">那篇文章</a>里本小子帮那位土耳其小哥用移位指令实现了两数相乘，今天蹲坑冥想时翻到位移指令的课堂笔记，重新捋一捋常用的四种位移指令的具体过程。</p><h2 id="位移指令分类"><a href="#位移指令分类" class="headerlink" title="位移指令分类"></a>位移指令分类</h2><p>EMU8086中常见(<del>考到</del>)的位移指令<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>可以分为循环位移指令和非循环位移指令两种，各自又可再细分出两小类：</p><ul><li>非循环位移指令<ul><li>逻辑位移指令<code>SHR</code>和<code>SHL</code>；</li><li>算数位移指令<code>SAR</code>和<code>SAL</code>；</li></ul></li><li>循环位移指令<ul><li>不带进位的循环移位指令<code>ROR</code>和<code>ROL</code>；</li><li>带进位的循环移位指令<code>RCR</code>和<code>RCL</code>。</li></ul></li></ul><h3 id="非循环位移指令"><a href="#非循环位移指令" class="headerlink" title="非循环位移指令"></a>非循环位移指令</h3><h4 id="逻辑位移指令"><a href="#逻辑位移指令" class="headerlink" title="逻辑位移指令"></a>逻辑位移指令</h4><p><strong>逻辑左移指令</strong><code>SHL</code>，aka. <em>Left Logic Shift</em>，目的操作数每向左移动一位，最低位用<code>0</code>填充。最高位进入<code>CF</code>标志位，丢弃<code>CF</code>中原来的数值。图示如下：<br><img src="http://c.biancheng.net/uploads/allimg/190509/4-1Z509150K0946.gif" alt="SHL" title="SHL"><br><strong>逻辑右移指令</strong><code>SHR</code>，aka. <em>Right Logic Shift</em>，目的操作数每向右移动一位，最高位用<code>0</code>填充。最低位进入<code>CF</code>标志位，丢弃<code>CF</code>中原来的数值。图示如下：<br><img src="http://c.biancheng.net/uploads/allimg/190509/4-1Z509154113459.gif" alt="SHR" title="SHR"></p><h4 id="算数位移指令"><a href="#算数位移指令" class="headerlink" title="算数位移指令"></a>算数位移指令</h4><p><strong>算数左移指令</strong><code>SAL</code>，aka. <em>Left Arithmetic Shift</em>，其实质与逻辑左移指令相同，目的操作数每左移一位，最低位用<code>0</code>补充，最高位进入<code>CF</code>标志位，丢弃其中原有数值。</p><p><strong>算数右移指令</strong><code>SAR</code>，aka. <em>Right Arithmetic Shift</em>，目的操作数每右移一位，最高位(<strong>符号位</strong>)不变，次高位与最高位相同，操作数的最低位进入<code>CF</code>标志位并丢弃其中原有数值。图示如下：<br><img src="http://c.biancheng.net/uploads/allimg/190509/4-1Z509162140558.gif" alt="SAR" title="SAR"></p><h3 id="循环位移指令"><a href="#循环位移指令" class="headerlink" title="循环位移指令"></a>循环位移指令</h3><h4 id="不带进位的循环移位指令"><a href="#不带进位的循环移位指令" class="headerlink" title="不带进位的循环移位指令"></a>不带进位的循环移位指令</h4><p><strong>不带进位的循环左移指令</strong><code>ROL</code>，aka. <em>Rotate left</em>，目的操作数所有位都向左移动，最高位同时复制到<code>CF</code>标志位和最低位，但循环移位指令不会丢弃数据，左端循环出去的数位会出现在最右端。比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MOV AL,90H; AL&#x3D;10010000B, CF&#x3D;0</span><br><span class="line">MOV CL,1; CL&#x3D;1</span><br><span class="line">ROL AL,CL; AL&#x3D;00100001B, CF&#x3D;1</span><br><span class="line">ROL AL,CL; AL&#x3D;01000010B, CF&#x3D;0</span><br></pre></td></tr></table></figure><p>图示如下：<br><img src="http://c.biancheng.net/uploads/allimg/190509/4-1Z5091A350554.gif" alt="ROL" title="ROL"><br><strong>不带进位的循环右移指令</strong><code>ROR</code>，aka. <em>Rotate Right</em>，目的操作数所有位都向右移动，最低位同时复制到<code>CF</code>标志位和最高位，循环移位指令不会丢弃数据，右端循环出去的数位会出现在最左端。比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MOV AL,91H; AL&#x3D;10010001B, CF&#x3D;0</span><br><span class="line">MOV CL,1; CL&#x3D;1</span><br><span class="line">ROR AL,CL; AL&#x3D;11001000B, CF&#x3D;1</span><br><span class="line">ROR AL,CL; AL&#x3D;01100100B, CF&#x3D;0</span><br></pre></td></tr></table></figure><p>图示如下：<br><img src="http://c.biancheng.net/uploads/allimg/190509/4-1Z5091H21Y21.gif" alt="ROR" title="ROR"></p><h4 id="带进位的循环移位指令"><a href="#带进位的循环移位指令" class="headerlink" title="带进位的循环移位指令"></a>带进位的循环移位指令</h4><p><strong>带进位的循环左移指令</strong><code>RCL</code>，aka. <em>Rotate Left Through Carry</em>，目的操作数所有数位向左移动，最高位移入<code>CF</code>标志位，而原<code>CF</code>标志位中的数值移到最低位。如果将进位标志位看作目的操作数的最高位，那么<code>RCL</code>实质上相当于<code>ROL</code>指令。比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MOV AL,91H; AL&#x3D;10010001B, CF&#x3D;0</span><br><span class="line">MOV CL,1; CL&#x3D;1</span><br><span class="line">RCL AL,CL; AL&#x3D;00100010B, CF&#x3D;1</span><br><span class="line">RCL AL,CL; AL&#x3D;01000101B, CF&#x3D;0</span><br></pre></td></tr></table></figure><p>图示如下：<br><img src="http://c.biancheng.net/uploads/allimg/190509/4-1Z5091I944551.gif" alt="RCL" title="RCL"><br><strong>带进位的循环右移指令</strong><code>RCR</code>，aka. <em>Rotate Right Through Carry</em>，目的操作数所有数位向右移动，最低位移入<code>CF</code>标志位，而原<code>CF</code>标志位中的数值移到最高位。如果将进位标志位看作目的操作数的最低位，那么<code>RCR</code>实质上相当于<code>ROR</code>指令。比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MOV AL,91H; AL&#x3D;10010001B, CF&#x3D;0</span><br><span class="line">MOV CL,1; CL&#x3D;1</span><br><span class="line">RCL AL,CL; AL&#x3D;01001000B, CF&#x3D;1</span><br><span class="line">RCL AL,CL; AL&#x3D;10100100B, CF&#x3D;0</span><br></pre></td></tr></table></figure><p>图示如下：<br><img src="http://c.biancheng.net/uploads/allimg/190509/4-1Z5091J2203T.gif" alt="RCR" title="RCR"></p><h2 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h2><p>为了方便比较节省时间，只使用<code>SHR</code>、<code>SAR</code>、<code>ROR</code>和<code>RCR</code>指令将十六进制数<code>9DH</code>向右移动两位(左移同理<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>)，使用<code>LAHF</code>指令将标志位寄存器的低8位存入<code>AH</code>中，并利用<a href="https://callmemengmeng.github.io/2020/04/11/%E5%AD%97%E9%95%BF%E6%95%B0%E6%8D%AE%E7%9A%84%E4%BA%8C%E5%85%AB%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%E4%B8%8E%E8%BE%93%E5%87%BA/">前文</a>提到的各位输出方法，将结果(<code>AL</code>和<code>CF</code>的值)显示在屏幕上。</p><h3 id="移位分析"><a href="#移位分析" class="headerlink" title="移位分析"></a>移位分析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MOV AL,9DH; AL &#x3D;  10011101B, CF&#x3D;0 </span><br><span class="line">SHR AL,2; AL -&gt; 01001110B, CF&#x3D;1 -&gt; 00100111B, CF&#x3D;0</span><br><span class="line">SAR AL,2; AL -&gt; 11001110B, CF&#x3D;1 -&gt; 11100111B, CF&#x3D;0</span><br><span class="line">ROR AL,2; AL -&gt; 11001110B, CF&#x3D;1 -&gt; 01100111B, CF&#x3D;0</span><br><span class="line">RCR AL,2; AL -&gt; 01001110B, CF&#x3D;1 -&gt; 10100111B, CF&#x3D;0</span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><code>9DH</code>=<code>10011101B</code>，分别使用<code>SHR</code>、<code>SAR</code>、<code>ROR</code>和<code>RCR</code>指令移动两位后，结果如下：<br><img src="/2020/04/20/Shift-Commands/RESULTS.jpg" alt="RESULTS" title="Results"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><details><summary>点击查看代码</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line">DATA SEGMENT</span><br><span class="line">    BUFF DB 4 DUP(0)  </span><br><span class="line">    FLAG DB 4 DUP(1)      </span><br><span class="line">    NUMB DB 9DH   </span><br><span class="line">    MES0 DB 0DH,0AH,&#39;THE RESULT OF COMMAND &lt;SHR AL,2&gt;: $&#39;</span><br><span class="line">    MES1 DB 0DH,0AH,&#39;THE RESULT OF COMMAND &lt;SAR AL,2&gt;: $&#39;</span><br><span class="line">    MES2 DB 0DH,0AH,&#39;THE RESULT OF COMMAND &lt;ROR AL,2&gt;: $&#39;</span><br><span class="line">    MES3 DB 0DH,0AH,&#39;THE RESULT OF COMMAND &lt;RCR AL,2&gt;: $&#39;   </span><br><span class="line">    MES4 DB 0DH,0AH,&#39;ORIGIN CF: 0 $&#39;        </span><br><span class="line">    MES5 DB &#39; CF: $&#39;</span><br><span class="line">DATA ENDS      </span><br><span class="line"></span><br><span class="line">STACK SEGMENT PARA STACK &#39;STACK&#39;</span><br><span class="line">    DB 10 DUP(0)</span><br><span class="line">STACK ENDS</span><br><span class="line"></span><br><span class="line">CODE SEGMENT</span><br><span class="line">    ASSUME CS:CODE,DS:DATA</span><br><span class="line">START:</span><br><span class="line">    MOV AX,DATA</span><br><span class="line">    MOV DS,AX   </span><br><span class="line">    MOV AX,0</span><br><span class="line">    LEA SI,BUFF  </span><br><span class="line">    LEA DI,FLAG</span><br><span class="line">    MOV CL,2        ; SHIFT&#x2F;ROTATE 9DH 2 BITS TO RIGHT</span><br><span class="line">    MOV AL,NUMB   </span><br><span class="line">    </span><br><span class="line">    PUSH AX</span><br><span class="line">    PUSH AX</span><br><span class="line">    PUSH AX </span><br><span class="line">    PUSH AX</span><br><span class="line">           </span><br><span class="line">    POP AX </span><br><span class="line">    SHR AL,CL      ; THE RESULT OF &#39;SHR&#39;</span><br><span class="line">    MOV [SI],AL</span><br><span class="line">    LAHF</span><br><span class="line">    MOV [DI],AH</span><br><span class="line">    INC SI  </span><br><span class="line">    INC DI</span><br><span class="line">    </span><br><span class="line">    POP AX</span><br><span class="line">    SAR AL,CL     ; THE RESULT OF &#39;SAR&#39;</span><br><span class="line">    MOV [SI],AL   </span><br><span class="line">    LAHF</span><br><span class="line">    MOV [DI],AH</span><br><span class="line">    INC SI </span><br><span class="line">    INC DI    </span><br><span class="line"></span><br><span class="line">    POP AX</span><br><span class="line">    ROR AL,CL     ; THE RESULT OF &#39;ROR&#39;                 </span><br><span class="line">    MOV [SI],AL </span><br><span class="line">    LAHF</span><br><span class="line">    MOV [DI],AH </span><br><span class="line">    INC SI</span><br><span class="line">    INC DI </span><br><span class="line">    </span><br><span class="line">    POP AX</span><br><span class="line">    RCR AL,CL     ; THE RESULT OF &#39;RCR&#39;</span><br><span class="line">    MOV [SI],AL </span><br><span class="line">    LAHF</span><br><span class="line">    MOV [DI],AH  </span><br><span class="line">  </span><br><span class="line">NEXT:</span><br><span class="line">    LEA SI,BUFF   ; CALL THE &#39;DISP&#39; SUBROUTINE TO DISPLAY EVERY BIT OF [SI]</span><br><span class="line">    LEA DI,FLAG</span><br><span class="line">    MOV AH,09H</span><br><span class="line">    MOV DX,OFFSET MES4</span><br><span class="line">    INT 21H</span><br><span class="line">    </span><br><span class="line">    MOV AH,09H</span><br><span class="line">    MOV DX,OFFSET MES0</span><br><span class="line">    INT 21H</span><br><span class="line">    CALL DISP   </span><br><span class="line">    CALL DISP_CF</span><br><span class="line">    INC SI    </span><br><span class="line">    INC DI</span><br><span class="line">  </span><br><span class="line">    MOV AH,09H</span><br><span class="line">    MOV DX,OFFSET MES1</span><br><span class="line">    INT 21H  </span><br><span class="line">    CALL DISP  </span><br><span class="line">    CALL DISP_CF</span><br><span class="line">    INC SI      </span><br><span class="line">    INC DI</span><br><span class="line"></span><br><span class="line">    MOV AH,09H </span><br><span class="line">    MOV DX,OFFSET MES2</span><br><span class="line">    INT 21H</span><br><span class="line">    CALL DISP  </span><br><span class="line">    CALL DISP_CF</span><br><span class="line">    INC SI      </span><br><span class="line">    INC DI</span><br><span class="line">    </span><br><span class="line">    MOV AH,09H</span><br><span class="line">    MOV DX,OFFSET MES3</span><br><span class="line">    INT 21H</span><br><span class="line">    CALL DISP   </span><br><span class="line">    CALL DISP_CF    </span><br><span class="line">    </span><br><span class="line">QUIT:</span><br><span class="line">    MOV AH,4CH</span><br><span class="line">    INT 21H</span><br><span class="line">           </span><br><span class="line">DISP PROC NEAR  </span><br><span class="line">    MOV DH,[SI] </span><br><span class="line">    MOV CX,08H</span><br><span class="line">    MOV AH,02H</span><br><span class="line">AGAIN: </span><br><span class="line">    MOV DL,DH</span><br><span class="line">    AND DL,80H </span><br><span class="line">    PUSH CX </span><br><span class="line">    MOV CL,07H</span><br><span class="line">    SHR DL,CL </span><br><span class="line">    ADD DL,30H </span><br><span class="line">    POP CX</span><br><span class="line">    INT 21H </span><br><span class="line">    SHL DH,1</span><br><span class="line">    LOOP AGAIN</span><br><span class="line">    RET</span><br><span class="line">DISP ENDP</span><br><span class="line">    </span><br><span class="line">DISP_CF PROC NEAR  </span><br><span class="line">    MOV AH,09H</span><br><span class="line">    MOV DX,OFFSET MES5</span><br><span class="line">    INT 21H  </span><br><span class="line">    MOV DL,[DI]  </span><br><span class="line">    AND DL,01H</span><br><span class="line">    ADD DL,30H</span><br><span class="line">    MOV AH,02H</span><br><span class="line">    INT 21H</span><br><span class="line">    RET</span><br><span class="line">DISP_CF ENDP</span><br><span class="line">    </span><br><span class="line">CODE ENDS</span><br><span class="line">    END START</span><br></pre></td></tr></table></figure></details><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">原理示意图出自<a href="http://c.biancheng.net/view/3589.html" target="_blank" rel="noopener">此处</a>。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">其实是本小子懒癌发作懒得再推左移的情况。</span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;http://xxx/aplayer.min.css&quot;&gt;&lt;script src=&quot;http://xxx/aplayer.min.js&quot; clas
      
    
    </summary>
    
    
      <category term="Blogs" scheme="https://CallMeMengMeng.github.io/categories/Blogs/"/>
    
      <category term="汇编" scheme="https://CallMeMengMeng.github.io/categories/Blogs/%E6%B1%87%E7%BC%96/"/>
    
    
      <category term="Blogs" scheme="https://CallMeMengMeng.github.io/tags/Blogs/"/>
    
      <category term="汇编" scheme="https://CallMeMengMeng.github.io/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>重构图标</title>
    <link href="https://callmemengmeng.github.io/2020/04/15/Icon-Reconduction/"/>
    <id>https://callmemengmeng.github.io/2020/04/15/Icon-Reconduction/</id>
    <published>2020-04-15T10:16:17.000Z</published>
    <updated>2020-04-15T10:21:21.786Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><hr><p>忙里偷闲，重构了小站图标。</p><p><img src="/2020/04/15/Icon-Reconduction/NewRM.ico" alt="Icon" title="Icon"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;http://xxx/aplayer.min.css&quot;&gt;&lt;script src=&quot;http://xxx/aplayer.min.js&quot; clas
      
    
    </summary>
    
    
      <category term="Blogs" scheme="https://CallMeMengMeng.github.io/categories/Blogs/"/>
    
    
      <category term="Blogs" scheme="https://CallMeMengMeng.github.io/tags/Blogs/"/>
    
  </entry>
  
  <entry>
    <title>字长数据的二八进制转换与输出</title>
    <link href="https://callmemengmeng.github.io/2020/04/11/%E5%AD%97%E9%95%BF%E6%95%B0%E6%8D%AE%E7%9A%84%E4%BA%8C%E5%85%AB%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%E4%B8%8E%E8%BE%93%E5%87%BA/"/>
    <id>https://callmemengmeng.github.io/2020/04/11/%E5%AD%97%E9%95%BF%E6%95%B0%E6%8D%AE%E7%9A%84%E4%BA%8C%E5%85%AB%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%E4%B8%8E%E8%BE%93%E5%87%BA/</id>
    <published>2020-04-11T14:36:25.000Z</published>
    <updated>2020-04-11T16:44:08.414Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><hr><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>最近碰到这么一道类型转换题，要求很简单，将一个字长数据<strong>1234H</strong>转换成对应的二进制和八进制数，并将其打印到屏幕上。之前本小子也有遇到过类型转化的问题，如今只是多了显示的步骤，其实加上差值转换成数字对应的<strong>ASCII</strong>码即可。但我在<a href="http://forec.cn" target="_blank" rel="noopener">这位老哥</a>处发现一种新的思路，记之如下。</p><h3 id="思路简介"><a href="#思路简介" class="headerlink" title="思路简介"></a>思路简介</h3><p>汇编21H中断输出需要用到<code>DL</code>这个8-BIT寄存器存储待显示的内容(<strong>BYTE</strong>)，但题设中字(<strong>WORD</strong>)长数据所在位置为16-BIT存储器，所以考虑先将之移入<code>BX</code>寄存器，每次只保留高八位也就是<code>BH</code>的首位，再利用无符号数移位指令将其放到<code>BH</code>的末位从而获得该十六进制数的二进制形式首位。</p><p>该字长数据中包含4-BIT十六进制数据，为了转换为6-BIT的八进制数，需要单独仿照上述步骤分离出首位，<code>BX</code>中剩下的15-BIT二进制数每次只保留前三位在<code>BH</code>中，移到后三位即可获得该十六进制数八进制形式的第二位。</p><p>由于<code>ASCII[0]=30H</code>，所以将结果加上<strong>30H</strong>即可转化为对应的字符，送入<code>DL</code>后便可以通过<strong>21H</strong>中断在屏幕上显示啦。当然这只完成了一个数据的转化输出，想要得到整个十六位二进制数(或者六位八进制数)就需要每次将<code>BX</code>数据向左边移动一位(或三位)，从而保证<code>BH</code>中遍历所有数据。这种做法的关键点在于，移位指令需要<code>CL</code>作为计数器，而<code>BX</code>的循环左移需要<code>CX</code>做计数器，为了避免数据交叠，需要在<code>CL</code>设置移动步数前将<code>CX</code>内容入栈，在输出<code>BH</code>内容后将<code>CX</code>内容出栈，最后才可以左移<code>BX</code>中的数据。</p><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><h4 id="字长十六进制数据转换为二进制并输出"><a href="#字长十六进制数据转换为二进制并输出" class="headerlink" title="字长十六进制数据转换为二进制并输出"></a>字长十六进制数据转换为二进制并输出</h4><div id="flowchart-0" class="flow-chart"></div><h4 id="字长十六进制数据转换为八进制并输出"><a href="#字长十六进制数据转换为八进制并输出" class="headerlink" title="字长十六进制数据转换为八进制并输出"></a>字长十六进制数据转换为八进制并输出</h4><div id="flowchart-1" class="flow-chart"></div><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><h4 id="题设条件"><a href="#题设条件" class="headerlink" title="题设条件"></a>题设条件</h4><p>TRY TO WRITE A PROGRAM WITH A NESTED STRUCTURE OF SUBROUTINES AND DISPLAY THE INTEGERS IN BINARY AND OCTAL FORMS.</p><ul><li>MAIN PROGRAM BANDO:<ul><li>STORE THE INTEGER NUMBERIC VARIABLE VAL1 IN THE STACK AND CALL THE SUBROUTINE PAIRS.</li></ul></li><li>SUBROUTINE PAIRS:<ul><li>REMOVE VAL1 FROM THE STACK.</li><li>CALL THE BINARY DISPLAY PROGRAM OUTBIN TO DISPLAY ITS EQUIVALENT BINARY NUMBER.</li><li>OUTPUT 8 SPACES.</li><li>CALL THE OCTAL DISPLAY PROGRAM OUTOCT TO DISPLAY ITS EQUIVALENT OCTAL NUMBER.</li><li>CALL THE SUBROUTINE BREAKLINE TO OUTPUT CARRIAGE RETURN AND LINE FEED.</li></ul></li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><details><summary>点击查看代码</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line">DATA SEGMENT</span><br><span class="line">VAL1 DW 1234H</span><br><span class="line">BINDISP DB &#39;BIN: $&#39;</span><br><span class="line">OCTDISP DB &#39;OCT: $&#39;</span><br><span class="line">SPACE DB &#39;        $&#39;; DISPLAY 8 SPACES</span><br><span class="line">BREAKLINE DB 0DH,0AH,&#39;$&#39;</span><br><span class="line">DATA ENDS</span><br><span class="line"></span><br><span class="line">STACK SEGMENT PARA STACK &#39;STACK&#39;</span><br><span class="line">DB 100 DUP(0)</span><br><span class="line">STACK ENDS</span><br><span class="line"></span><br><span class="line">CODE SEGMENT</span><br><span class="line">ASSUME DS:DATA,CS:CODE</span><br><span class="line">START:</span><br><span class="line">MOV AX,DATA</span><br><span class="line">MOV DS,AX</span><br><span class="line">MOV ES,AX</span><br><span class="line">CALL BANDO</span><br><span class="line">QUIT:</span><br><span class="line">MOV AH,4CH</span><br><span class="line">INT 21H</span><br><span class="line">; MIAN PROGRAM BANDO</span><br><span class="line">BANDO PROC NEAR</span><br><span class="line">PUSH VAL1</span><br><span class="line">CALL PAIRS</span><br><span class="line">RET</span><br><span class="line">BANDO ENDP</span><br><span class="line">; SUBROUTINE PAIRS</span><br><span class="line">PAIRS PROC NEAR</span><br><span class="line">POP BX</span><br><span class="line">POP AX</span><br><span class="line">CALL OUTBIN</span><br><span class="line">CALL OUTOCT</span><br><span class="line">RET</span><br><span class="line">PAIRS ENDP</span><br><span class="line">; SUBROUTINE OUTBIN</span><br><span class="line">OUTBIN PROC NEAR</span><br><span class="line">PUSH AX</span><br><span class="line">PUSH BX</span><br><span class="line">PUSH CX</span><br><span class="line">PUSH DX</span><br><span class="line"></span><br><span class="line">MOV BX,AX</span><br><span class="line">MOV AH,09H; DISPLAY BINDISP</span><br><span class="line">MOV DX,OFFSET BINDISP</span><br><span class="line">INT 21H</span><br><span class="line">MOV CX,10H; A WORD-FIUGRE HAS 16 BITS</span><br><span class="line">MOV AH,02H</span><br><span class="line">LOOP1:</span><br><span class="line">MOV DL,BH</span><br><span class="line">AND DL,80H; KEEP THE FISRST BIT OF BH MERELY</span><br><span class="line">PUSH CX; &#39;CAUSE SHR NEEDS USING CL, PUSH CX IN STACK TO BACKUP THE ORIGIN DATA</span><br><span class="line">MOV CL,07H</span><br><span class="line">SHR DL,CL; SHIFT THE FIRST BIT OF BH TO THE LAST BIT, AND SET THE OTHER BITS OF BH 0</span><br><span class="line">POP CX</span><br><span class="line">ADD DL,30H; CONVERT THE NUMBERIC FIGURE TO CHARACTER</span><br><span class="line">INT 21H; OUTPUT DL</span><br><span class="line">SHL BX,1; SHIFT THE WHOLE BX TO LEFT BY 1 BIT SO AS TO OUTPUT EACH BIT OF BX </span><br><span class="line">LOOP LOOP1</span><br><span class="line">MOV AH,02H</span><br><span class="line">MOV DL,&#39;B&#39;; OUTPUT &#39;B&#39; FOLLOWING BX</span><br><span class="line">INT 21H</span><br><span class="line">MOV AH,09H</span><br><span class="line">MOV DX,OFFSET SPACE; OUTPUT 8 SPACES FOLLOWING &#39;B&#39;</span><br><span class="line">INT 21H</span><br><span class="line">POP DX</span><br><span class="line">POP CX</span><br><span class="line">POP BX</span><br><span class="line">POP AX</span><br><span class="line">RET</span><br><span class="line">OUTBIN ENDP</span><br><span class="line"></span><br><span class="line">OUTOCT PROC NEAR</span><br><span class="line">PUSH AX</span><br><span class="line">PUSH BX</span><br><span class="line">PUSH CX</span><br><span class="line">PUSH DX</span><br><span class="line"></span><br><span class="line">MOV BX,AX</span><br><span class="line">MOV AH,09H; DISPLAY OCTDISP</span><br><span class="line">MOV DX,OFFSET OCTDISP</span><br><span class="line">INT 21H</span><br><span class="line">MOV CL,07H; OUTPUT THE FIRST BIT OF BX</span><br><span class="line">MOV AH,02H</span><br><span class="line">MOV DL,BH</span><br><span class="line">AND DL,80H</span><br><span class="line">SHR DL,CL</span><br><span class="line">ADD DL,30H</span><br><span class="line">INT 21H</span><br><span class="line">SHL BX,1; SHIFT THE WHOLE BX TO LEFT BY 1 BIT</span><br><span class="line">MOV CX,05H; A OCTAL FIGURE EQUALS TO 3 BINARY BITS, THERE ARE 5 OCTAL FIGURES EXCEPT THE FIRST BIT</span><br><span class="line">LOOP2:</span><br><span class="line">MOV DL,BH</span><br><span class="line">AND DL,0E0H; KEEP THE FIRST 3 BITS OF BH MERELY</span><br><span class="line">PUSH CX</span><br><span class="line">MOV CL,05H; SHIFT THE FIRST 3 BITS OF BH TO THE LAST 3 BITS, AND SET THE OTHER BITS OF BH 0</span><br><span class="line">SHR DL,CL</span><br><span class="line">POP CX</span><br><span class="line">ADD DL,30H</span><br><span class="line">INT 21H</span><br><span class="line">SHL BX,3; SHIFT THE WHOLE BX TO LEFT BY 3 BITS SO AS TO CONVERT EACH 3 BITS OF BX TO A OCTAL</span><br><span class="line">LOOP LOOP2; FIGURES AND OUTPUT THEM</span><br><span class="line">MOV AH,02H</span><br><span class="line">MOV DL,&#39;O&#39;; OUTPUT &#39;B&#39; FOLLOWING BX</span><br><span class="line">INT 21H</span><br><span class="line">CALL NEXTLINE; CALL THE SUBROUTINE BREAKLINE</span><br><span class="line">POP DX</span><br><span class="line">POP CX</span><br><span class="line">POP BX</span><br><span class="line">POP AX</span><br><span class="line">RET</span><br><span class="line">OUTOCT ENDP</span><br><span class="line"></span><br><span class="line">NEXTLINE PROC NEAR</span><br><span class="line">PUSH AX</span><br><span class="line">PUSH DX</span><br><span class="line">MOV AH,09H</span><br><span class="line">MOV DX,OFFSET BREAKLINE</span><br><span class="line">INT 21H</span><br><span class="line">POP DX</span><br><span class="line">POP AX</span><br><span class="line">RET</span><br><span class="line">NEXTLINE ENDP</span><br><span class="line"></span><br><span class="line">CODE ENDS</span><br><span class="line">END START</span><br></pre></td></tr></table></figure></details><h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="/2020/04/11/%E5%AD%97%E9%95%BF%E6%95%B0%E6%8D%AE%E7%9A%84%E4%BA%8C%E5%85%AB%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%E4%B8%8E%E8%BE%93%E5%87%BA/Result.jpg" alt="Result" title="Result"></p><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">start=>start: 开始op1=>operation: 将1234H存入BX中op2=>operation: MOV AH,02HMOV CX,10Hop3=>operation: MOV DL,BH只保留BH的最高位 AND DL,80Hop4=>operation: PUSH CXMOV CL,07HSHR DL,CL将BH最高位移动到末位，其他位0op5=>operation: ADD DL,30H将数字转化为对应字符POP CXio1=>inputoutput: INT 21H开中断输出DLop6=>operation: 将BX的下一位移到首位SHL BX,1CX--cond1=>condition: CX=0?e=>end: 结束start->op1->op2->op3->op4->op5(right)->io1->op6(right)->cond1cond1(no,right)->op3cond1(yes)->e</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script><textarea id="flowchart-1-code" style="display: none">start=>start: 开始op1=>operation: 将1234H存入BX中op2=>operation: MOV AH,02HMOV CL,07HMOV DL,BHSHR DL,CL将BH最高位移到末位其他位0op3=>operation: ADD DL,30H将数字转化为对应字符io1=>inputoutput: INT 21H开中断输出DLop4=>operation: SHL BX,1MOV CX,05HMOV AH,02Hop5=>operation: MOV DL,BHAND DL,E0H(保留BH前三位)PUSH CXMOV CL,05HSHR DL,CL(将高三位移到末三位)ADD DL,30H(将数字转化为对应字符)POP CXio2=>inputoutput: INT 21H开中断输出DLop6=>operation: SHL BX,3(将BX的另外三位移动到高三位)CX--cond=>condition: CX=0?e=>end: 结束start->op1->op2->op3(right)->io1->op4->op5->io2io2->op6(right)->condcond(yes)->econd(no,right)->op5</textarea><textarea id="flowchart-1-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-1-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-1-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-1", options);</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;http://xxx/aplayer.min.css&quot;&gt;&lt;script src=&quot;http://xxx/aplayer.min.js&quot; clas
      
    
    </summary>
    
    
      <category term="Blogs" scheme="https://CallMeMengMeng.github.io/categories/Blogs/"/>
    
      <category term="汇编" scheme="https://CallMeMengMeng.github.io/categories/Blogs/%E6%B1%87%E7%BC%96/"/>
    
    
      <category term="Blogs" scheme="https://CallMeMengMeng.github.io/tags/Blogs/"/>
    
      <category term="汇编" scheme="https://CallMeMengMeng.github.io/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>FlowChart流程图</title>
    <link href="https://callmemengmeng.github.io/2020/04/11/FlowChart%E6%B5%81%E7%A8%8B%E5%9B%BE/"/>
    <id>https://callmemengmeng.github.io/2020/04/11/FlowChart%E6%B5%81%E7%A8%8B%E5%9B%BE/</id>
    <published>2020-04-11T04:46:32.000Z</published>
    <updated>2020-04-11T06:09:35.182Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>高中数学第一次接触程序就一直是手绘流程图，后来学C时老师推荐使用<a href="https://www.processon.com/" target="_blank" rel="noopener">ProcessOn</a>绘制，最近写汇编程序又要用到，码字时总要登陆网页先绘制再下载之后还得贴到文字内容的相应位置，尤其在需要绘制多张流程图时略显麻烦(比如<a href="https://callmemengmeng.github.io/2020/04/07/">这种</a>工作量)，所以考虑使用Markdown直接绘(<strong>手</strong>)制(<strong>写</strong>)。</p><p>本着搬轮子的指导思想，本小子放狗搜了一圈后发现Markdown支持绘制流程图的插件还真不少，结合Hexo框架的具体实际最终选择基于<a href="http://flowchart.js.org/" target="_blank" rel="noopener"><code>flowchart.js</code></a>的<a href="https://github.com/bubkoo/hexo-filter-flowchart" target="_blank" rel="noopener"><code>hexo-filter-flowchart</code></a>插件。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>轮子的好处就在于省事儿，Hexo的这些插件基本上都可一句话安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save hexo-filter-flowchart</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在Hexo的<code>_config.yml</code>文件(注意不是主题的<code>_config.yml</code>)中添加如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">flowchart:</span><br><span class="line">  # raphael:   # optional, the source url of raphael.js</span><br><span class="line">  # flowchart: # optional, the source url of flowchart.js</span><br><span class="line">  options: # options used for &#96;drawSVG&#96;</span><br></pre></td></tr></table></figure><p>但和<a href="https://www.liuyude.com/How_to_make_your_HEXO_blog_support_handwriting_flowchart.html" target="_blank" rel="noopener">这位老哥</a>发现的问题一样，插件安装成功后未在<code>_config.yml</code>中配置也能直接使用，这一点挺神奇的！</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>由于这个<code>hexo-filter-flowchart</code>插件基于<code>flowchart.js</code>，实际上使用的是后者的语法<code>name=&gt;type: content:&gt;url</code>。其中，</p><ul><li><strong>name</strong>为元素的名称；</li><li><strong>type</strong>为元素所在的流程类型，包括：<ul><li>start，</li><li>end，</li><li>operation，</li><li>subroutine，</li><li>condition，</li><li>input/output，</li><li>parallel；</li></ul></li><li><strong>content</strong>为文本内容(自定义)；</li><li><strong>url</strong>为文本中随附的链接。</li></ul><p>比如插件作者给出的这个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">\&#96;\&#96;\&#96;flow# 使用时删去&#39;\&#39;符号</span><br><span class="line">st&#x3D;&gt;start: Start|past:&gt;</span><br><span class="line">e&#x3D;&gt;end: End:&gt;https:&#x2F;&#x2F;github.com&#x2F;bubkoo&#x2F;hexo-filter-flowchart</span><br><span class="line">op1&#x3D;&gt;operation: My Operation|past</span><br><span class="line">op2&#x3D;&gt;operation: Stuff|current</span><br><span class="line">sub1&#x3D;&gt;subroutine: My Subroutine|invalid</span><br><span class="line">cond&#x3D;&gt;condition: Yes</span><br><span class="line">or No?|approved:&gt;https:&#x2F;&#x2F;github.com&#x2F;bubkoo&#x2F;hexo-filter-flowchart</span><br><span class="line">c2&#x3D;&gt;condition: Good idea|rejected</span><br><span class="line">io&#x3D;&gt;inputoutput: catch something...|request</span><br><span class="line"></span><br><span class="line">st-&gt;op1(right)-&gt;cond</span><br><span class="line">cond(yes, right)-&gt;c2</span><br><span class="line">cond(no)-&gt;sub1(left)-&gt;op1</span><br><span class="line">c2(yes)-&gt;io-&gt;e</span><br><span class="line">c2(no)-&gt;op2-&gt;e</span><br><span class="line">\&#96;\&#96;\&#96;# 使用时删去&#39;\&#39;符号</span><br></pre></td></tr></table></figure><p>效果如下：</p><div id="flowchart-0" class="flow-chart"></div><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: Start|past:>e=>end: End:>https://github.com/bubkoo/hexo-filter-flowchartop1=>operation: My Operation|pastop2=>operation: Stuff|currentsub1=>subroutine: My Subroutine|invalidcond=>condition: Yesor No?|approved:>https://github.com/bubkoo/hexo-filter-flowchartc2=>condition: Good idea|rejectedio=>inputoutput: catch something...|requestst->op1(right)->condcond(yes, right)->c2cond(no)->sub1(left)->op1c2(yes)->io->ec2(no)->op2->e</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;http://xxx/aplayer.min.css&quot;&gt;&lt;script src=&quot;http://xxx/aplayer.min.js&quot; clas
      
    
    </summary>
    
    
      <category term="Markdown" scheme="https://CallMeMengMeng.github.io/categories/Markdown/"/>
    
    
      <category term="Blogs" scheme="https://CallMeMengMeng.github.io/tags/Blogs/"/>
    
      <category term="Markdown" scheme="https://CallMeMengMeng.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>从一个折腾走向另一个折腾</title>
    <link href="https://callmemengmeng.github.io/2020/04/08/%E4%BB%8E%E4%B8%80%E4%B8%AA%E6%8A%98%E8%85%BE%E8%B5%B0%E5%90%91%E5%8F%A6%E4%B8%80%E4%B8%AA%E6%8A%98%E8%85%BE/"/>
    <id>https://callmemengmeng.github.io/2020/04/08/%E4%BB%8E%E4%B8%80%E4%B8%AA%E6%8A%98%E8%85%BE%E8%B5%B0%E5%90%91%E5%8F%A6%E4%B8%80%E4%B8%AA%E6%8A%98%E8%85%BE/</id>
    <published>2020-04-08T12:50:11.000Z</published>
    <updated>2020-04-09T01:59:19.040Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><hr><p><center><font face="楷体" size="2" color="gray">“人生就是从一个折腾走向另一个折腾。”——Reyes Meng</font></center></p><p>也不知搭错哪根筋，本小子突发奇想揍性大发就要再倒腾倒腾这小破站。其实颠来倒去就一件事儿，从去年配置好<a href="https://hexo.io/zh-cn/index.html" target="_blank" rel="noopener">HEXO</a>苟到今日，有些文章涉及人员指向性略强得考虑给加加密啊。这才有了傍晚前的一通倒腾。有道是知己知彼方能百战不殆，故出恭时手也没闲着放狗搜相关技术贴子，搭眼一瞧这博文加密有现成轮子可用，节省不少体力！</p><h3 id="文章加密"><a href="#文章加密" class="headerlink" title="文章加密"></a>文章加密</h3><p>我的需求很简单只用实现某篇文章输入密码可见即可，HEXO官方插件库中有一款<code>hexo-blog-encrypt</code><a href="https://github.com/MikeCoder/hexo-blog-encrypt" target="_blank" rel="noopener">插件</a>完美契合，且其安装配置和使用都很方便。</p><h4 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h4><p>鉴于本小子暂时还处在盗版<em>Win10</em>的穷学生时代，并不清楚其他<del>(单纯指Mac)</del>平台的安装方式，故下面所有操作均基于<em>Win + Git Bash + npm</em>环境。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-blog-encrypt --save</span><br></pre></td></tr></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>插件下载成功后需要修改HEXO的<code>_config.yml</code>文件，注意不是所使用主题的<code>_config.yml</code>文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">## hexo-blog-encrypt</span><br><span class="line">encrypt:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>设置成功后，打开需要加密的文章，在其头部添加如下内容即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: The title of your article</span><br><span class="line">tags: Tags of your article</span><br><span class="line">date: Dates of your writing</span><br><span class="line">password: ReyesMeng</span><br><span class="line">abstract: Here&#39;s something encrypted, password is required to continue reading.</span><br><span class="line">message: Hey, password is required here.</span><br><span class="line">wrong_pass_message: Oh, this is an invalid password. Check and try again, please.</span><br><span class="line">---</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;http://xxx/aplayer.min.css&quot;&gt;&lt;script src=&quot;http://xxx/aplayer.min.js&quot; clas
      
    
    </summary>
    
    
      <category term="Blogs" scheme="https://CallMeMengMeng.github.io/categories/Blogs/"/>
    
    
      <category term="Blogs" scheme="https://CallMeMengMeng.github.io/tags/Blogs/"/>
    
  </entry>
  
</feed>
