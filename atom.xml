<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ReyesMeng&#39;s Blog</title>
  
  <subtitle>Vaya con Dios.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://callmemengmeng.github.io/"/>
  <updated>2020-04-11T16:44:08.414Z</updated>
  <id>https://callmemengmeng.github.io/</id>
  
  <author>
    <name>ReyesMeng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>字长数据的二八进制转换与输出</title>
    <link href="https://callmemengmeng.github.io/2020/04/11/%E5%AD%97%E9%95%BF%E6%95%B0%E6%8D%AE%E7%9A%84%E4%BA%8C%E5%85%AB%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%E4%B8%8E%E8%BE%93%E5%87%BA/"/>
    <id>https://callmemengmeng.github.io/2020/04/11/%E5%AD%97%E9%95%BF%E6%95%B0%E6%8D%AE%E7%9A%84%E4%BA%8C%E5%85%AB%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%E4%B8%8E%E8%BE%93%E5%87%BA/</id>
    <published>2020-04-11T14:36:25.000Z</published>
    <updated>2020-04-11T16:44:08.414Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><hr><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>最近碰到这么一道类型转换题，要求很简单，将一个字长数据<strong>1234H</strong>转换成对应的二进制和八进制数，并将其打印到屏幕上。之前本小子也有遇到过类型转化的问题，如今只是多了显示的步骤，其实加上差值转换成数字对应的<strong>ASCII</strong>码即可。但我在<a href="http://forec.cn" target="_blank" rel="noopener">这位老哥</a>处发现一种新的思路，记之如下。</p><h3 id="思路简介"><a href="#思路简介" class="headerlink" title="思路简介"></a>思路简介</h3><p>汇编21H中断输出需要用到<code>DL</code>这个8-BIT寄存器存储待显示的内容(<strong>BYTE</strong>)，但题设中字(<strong>WORD</strong>)长数据所在位置为16-BIT存储器，所以考虑先将之移入<code>BX</code>寄存器，每次只保留高八位也就是<code>BH</code>的首位，再利用无符号数移位指令将其放到<code>BH</code>的末位从而获得该十六进制数的二进制形式首位。</p><p>该字长数据中包含4-BIT十六进制数据，为了转换为6-BIT的八进制数，需要单独仿照上述步骤分离出首位，<code>BX</code>中剩下的15-BIT二进制数每次只保留前三位在<code>BH</code>中，移到后三位即可获得该十六进制数八进制形式的第二位。</p><p>由于<code>ASCII[0]=30H</code>，所以将结果加上<strong>30H</strong>即可转化为对应的字符，送入<code>DL</code>后便可以通过<strong>21H</strong>中断在屏幕上显示啦。当然这只完成了一个数据的转化输出，想要得到整个十六位二进制数(或者六位八进制数)就需要每次将<code>BX</code>数据向左边移动一位(或三位)，从而保证<code>BH</code>中遍历所有数据。这种做法的关键点在于，移位指令需要<code>CL</code>作为计数器，而<code>BX</code>的循环左移需要<code>CX</code>做计数器，为了避免数据交叠，需要在<code>CL</code>设置移动步数前将<code>CX</code>内容入栈，在输出<code>BH</code>内容后将<code>CX</code>内容出栈，最后才可以左移<code>BX</code>中的数据。</p><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><h4 id="字长十六进制数据转换为二进制并输出"><a href="#字长十六进制数据转换为二进制并输出" class="headerlink" title="字长十六进制数据转换为二进制并输出"></a>字长十六进制数据转换为二进制并输出</h4><div id="flowchart-0" class="flow-chart"></div><h4 id="字长十六进制数据转换为八进制并输出"><a href="#字长十六进制数据转换为八进制并输出" class="headerlink" title="字长十六进制数据转换为八进制并输出"></a>字长十六进制数据转换为八进制并输出</h4><div id="flowchart-1" class="flow-chart"></div><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><h4 id="题设条件"><a href="#题设条件" class="headerlink" title="题设条件"></a>题设条件</h4><p>TRY TO WRITE A PROGRAM WITH A NESTED STRUCTURE OF SUBROUTINES AND DISPLAY THE INTEGERS IN BINARY AND OCTAL FORMS.</p><ul><li>MAIN PROGRAM BANDO:<ul><li>STORE THE INTEGER NUMBERIC VARIABLE VAL1 IN THE STACK AND CALL THE SUBROUTINE PAIRS.</li></ul></li><li>SUBROUTINE PAIRS:<ul><li>REMOVE VAL1 FROM THE STACK.</li><li>CALL THE BINARY DISPLAY PROGRAM OUTBIN TO DISPLAY ITS EQUIVALENT BINARY NUMBER.</li><li>OUTPUT 8 SPACES.</li><li>CALL THE OCTAL DISPLAY PROGRAM OUTOCT TO DISPLAY ITS EQUIVALENT OCTAL NUMBER.</li><li>CALL THE SUBROUTINE BREAKLINE TO OUTPUT CARRIAGE RETURN AND LINE FEED.</li></ul></li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><details><summary>点击查看代码</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line">DATA SEGMENT</span><br><span class="line">VAL1 DW 1234H</span><br><span class="line">BINDISP DB &#39;BIN: $&#39;</span><br><span class="line">OCTDISP DB &#39;OCT: $&#39;</span><br><span class="line">SPACE DB &#39;        $&#39;; DISPLAY 8 SPACES</span><br><span class="line">BREAKLINE DB 0DH,0AH,&#39;$&#39;</span><br><span class="line">DATA ENDS</span><br><span class="line"></span><br><span class="line">STACK SEGMENT PARA STACK &#39;STACK&#39;</span><br><span class="line">DB 100 DUP(0)</span><br><span class="line">STACK ENDS</span><br><span class="line"></span><br><span class="line">CODE SEGMENT</span><br><span class="line">ASSUME DS:DATA,CS:CODE</span><br><span class="line">START:</span><br><span class="line">MOV AX,DATA</span><br><span class="line">MOV DS,AX</span><br><span class="line">MOV ES,AX</span><br><span class="line">CALL BANDO</span><br><span class="line">QUIT:</span><br><span class="line">MOV AH,4CH</span><br><span class="line">INT 21H</span><br><span class="line">; MIAN PROGRAM BANDO</span><br><span class="line">BANDO PROC NEAR</span><br><span class="line">PUSH VAL1</span><br><span class="line">CALL PAIRS</span><br><span class="line">RET</span><br><span class="line">BANDO ENDP</span><br><span class="line">; SUBROUTINE PAIRS</span><br><span class="line">PAIRS PROC NEAR</span><br><span class="line">POP BX</span><br><span class="line">POP AX</span><br><span class="line">CALL OUTBIN</span><br><span class="line">CALL OUTOCT</span><br><span class="line">RET</span><br><span class="line">PAIRS ENDP</span><br><span class="line">; SUBROUTINE OUTBIN</span><br><span class="line">OUTBIN PROC NEAR</span><br><span class="line">PUSH AX</span><br><span class="line">PUSH BX</span><br><span class="line">PUSH CX</span><br><span class="line">PUSH DX</span><br><span class="line"></span><br><span class="line">MOV BX,AX</span><br><span class="line">MOV AH,09H; DISPLAY BINDISP</span><br><span class="line">MOV DX,OFFSET BINDISP</span><br><span class="line">INT 21H</span><br><span class="line">MOV CX,10H; A WORD-FIUGRE HAS 16 BITS</span><br><span class="line">MOV AH,02H</span><br><span class="line">LOOP1:</span><br><span class="line">MOV DL,BH</span><br><span class="line">AND DL,80H; KEEP THE FISRST BIT OF BH MERELY</span><br><span class="line">PUSH CX; &#39;CAUSE SHR NEEDS USING CL, PUSH CX IN STACK TO BACKUP THE ORIGIN DATA</span><br><span class="line">MOV CL,07H</span><br><span class="line">SHR DL,CL; SHIFT THE FIRST BIT OF BH TO THE LAST BIT, AND SET THE OTHER BITS OF BH 0</span><br><span class="line">POP CX</span><br><span class="line">ADD DL,30H; CONVERT THE NUMBERIC FIGURE TO CHARACTER</span><br><span class="line">INT 21H; OUTPUT DL</span><br><span class="line">SHL BX,1; SHIFT THE WHOLE BX TO LEFT BY 1 BIT SO AS TO OUTPUT EACH BIT OF BX </span><br><span class="line">LOOP LOOP1</span><br><span class="line">MOV AH,02H</span><br><span class="line">MOV DL,&#39;B&#39;; OUTPUT &#39;B&#39; FOLLOWING BX</span><br><span class="line">INT 21H</span><br><span class="line">MOV AH,09H</span><br><span class="line">MOV DX,OFFSET SPACE; OUTPUT 8 SPACES FOLLOWING &#39;B&#39;</span><br><span class="line">INT 21H</span><br><span class="line">POP DX</span><br><span class="line">POP CX</span><br><span class="line">POP BX</span><br><span class="line">POP AX</span><br><span class="line">RET</span><br><span class="line">OUTBIN ENDP</span><br><span class="line"></span><br><span class="line">OUTOCT PROC NEAR</span><br><span class="line">PUSH AX</span><br><span class="line">PUSH BX</span><br><span class="line">PUSH CX</span><br><span class="line">PUSH DX</span><br><span class="line"></span><br><span class="line">MOV BX,AX</span><br><span class="line">MOV AH,09H; DISPLAY OCTDISP</span><br><span class="line">MOV DX,OFFSET OCTDISP</span><br><span class="line">INT 21H</span><br><span class="line">MOV CL,07H; OUTPUT THE FIRST BIT OF BX</span><br><span class="line">MOV AH,02H</span><br><span class="line">MOV DL,BH</span><br><span class="line">AND DL,80H</span><br><span class="line">SHR DL,CL</span><br><span class="line">ADD DL,30H</span><br><span class="line">INT 21H</span><br><span class="line">SHL BX,1; SHIFT THE WHOLE BX TO LEFT BY 1 BIT</span><br><span class="line">MOV CX,05H; A OCTAL FIGURE EQUALS TO 3 BINARY BITS, THERE ARE 5 OCTAL FIGURES EXCEPT THE FIRST BIT</span><br><span class="line">LOOP2:</span><br><span class="line">MOV DL,BH</span><br><span class="line">AND DL,0E0H; KEEP THE FIRST 3 BITS OF BH MERELY</span><br><span class="line">PUSH CX</span><br><span class="line">MOV CL,05H; SHIFT THE FIRST 3 BITS OF BH TO THE LAST 3 BITS, AND SET THE OTHER BITS OF BH 0</span><br><span class="line">SHR DL,CL</span><br><span class="line">POP CX</span><br><span class="line">ADD DL,30H</span><br><span class="line">INT 21H</span><br><span class="line">SHL BX,3; SHIFT THE WHOLE BX TO LEFT BY 3 BITS SO AS TO CONVERT EACH 3 BITS OF BX TO A OCTAL</span><br><span class="line">LOOP LOOP2; FIGURES AND OUTPUT THEM</span><br><span class="line">MOV AH,02H</span><br><span class="line">MOV DL,&#39;O&#39;; OUTPUT &#39;B&#39; FOLLOWING BX</span><br><span class="line">INT 21H</span><br><span class="line">CALL NEXTLINE; CALL THE SUBROUTINE BREAKLINE</span><br><span class="line">POP DX</span><br><span class="line">POP CX</span><br><span class="line">POP BX</span><br><span class="line">POP AX</span><br><span class="line">RET</span><br><span class="line">OUTOCT ENDP</span><br><span class="line"></span><br><span class="line">NEXTLINE PROC NEAR</span><br><span class="line">PUSH AX</span><br><span class="line">PUSH DX</span><br><span class="line">MOV AH,09H</span><br><span class="line">MOV DX,OFFSET BREAKLINE</span><br><span class="line">INT 21H</span><br><span class="line">POP DX</span><br><span class="line">POP AX</span><br><span class="line">RET</span><br><span class="line">NEXTLINE ENDP</span><br><span class="line"></span><br><span class="line">CODE ENDS</span><br><span class="line">END START</span><br></pre></td></tr></table></figure></details><h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="/2020/04/11/%E5%AD%97%E9%95%BF%E6%95%B0%E6%8D%AE%E7%9A%84%E4%BA%8C%E5%85%AB%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%E4%B8%8E%E8%BE%93%E5%87%BA/Result.jpg" alt="Result" title="Result"></p><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">start=>start: 开始op1=>operation: 将1234H存入BX中op2=>operation: MOV AH,02HMOV CX,10Hop3=>operation: MOV DL,BH只保留BH的最高位 AND DL,80Hop4=>operation: PUSH CXMOV CL,07HSHR DL,CL将BH最高位移动到末位，其他位0op5=>operation: ADD DL,30H将数字转化为对应字符POP CXio1=>inputoutput: INT 21H开中断输出DLop6=>operation: 将BX的下一位移到首位SHL BX,1CX--cond1=>condition: CX=0?e=>end: 结束start->op1->op2->op3->op4->op5(right)->io1->op6(right)->cond1cond1(no,right)->op3cond1(yes)->e</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script><textarea id="flowchart-1-code" style="display: none">start=>start: 开始op1=>operation: 将1234H存入BX中op2=>operation: MOV AH,02HMOV CL,07HMOV DL,BHSHR DL,CL将BH最高位移到末位其他位0op3=>operation: ADD DL,30H将数字转化为对应字符io1=>inputoutput: INT 21H开中断输出DLop4=>operation: SHL BX,1MOV CX,05HMOV AH,02Hop5=>operation: MOV DL,BHAND DL,E0H(保留BH前三位)PUSH CXMOV CL,05HSHR DL,CL(将高三位移到末三位)ADD DL,30H(将数字转化为对应字符)POP CXio2=>inputoutput: INT 21H开中断输出DLop6=>operation: SHL BX,3(将BX的另外三位移动到高三位)CX--cond=>condition: CX=0?e=>end: 结束start->op1->op2->op3(right)->io1->op4->op5->io2io2->op6(right)->condcond(yes)->econd(no,right)->op5</textarea><textarea id="flowchart-1-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-1-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-1-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-1", options);</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;http://xxx/aplayer.min.css&quot;&gt;&lt;script src=&quot;http://xxx/aplayer.min.js&quot; clas
      
    
    </summary>
    
    
      <category term="Blogs" scheme="https://CallMeMengMeng.github.io/categories/Blogs/"/>
    
      <category term="汇编" scheme="https://CallMeMengMeng.github.io/categories/Blogs/%E6%B1%87%E7%BC%96/"/>
    
    
      <category term="Blogs" scheme="https://CallMeMengMeng.github.io/tags/Blogs/"/>
    
      <category term="汇编" scheme="https://CallMeMengMeng.github.io/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>FlowChart流程图</title>
    <link href="https://callmemengmeng.github.io/2020/04/11/FlowChart%E6%B5%81%E7%A8%8B%E5%9B%BE/"/>
    <id>https://callmemengmeng.github.io/2020/04/11/FlowChart%E6%B5%81%E7%A8%8B%E5%9B%BE/</id>
    <published>2020-04-11T04:46:32.000Z</published>
    <updated>2020-04-11T06:09:35.182Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>高中数学第一次接触程序就一直是手绘流程图，后来学C时老师推荐使用<a href="https://www.processon.com/" target="_blank" rel="noopener">ProcessOn</a>绘制，最近写汇编程序又要用到，码字时总要登陆网页先绘制再下载之后还得贴到文字内容的相应位置，尤其在需要绘制多张流程图时略显麻烦(比如<a href="https://callmemengmeng.github.io/2020/04/07/">这种</a>工作量)，所以考虑使用Markdown直接绘(<strong>手</strong>)制(<strong>写</strong>)。</p><p>本着搬轮子的指导思想，本小子放狗搜了一圈后发现Markdown支持绘制流程图的插件还真不少，结合Hexo框架的具体实际最终选择基于<a href="http://flowchart.js.org/" target="_blank" rel="noopener"><code>flowchart.js</code></a>的<a href="https://github.com/bubkoo/hexo-filter-flowchart" target="_blank" rel="noopener"><code>hexo-filter-flowchart</code></a>插件。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>轮子的好处就在于省事儿，Hexo的这些插件基本上都可一句话安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save hexo-filter-flowchart</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在Hexo的<code>_config.yml</code>文件(注意不是主题的<code>_config.yml</code>)中添加如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">flowchart:</span><br><span class="line">  # raphael:   # optional, the source url of raphael.js</span><br><span class="line">  # flowchart: # optional, the source url of flowchart.js</span><br><span class="line">  options: # options used for &#96;drawSVG&#96;</span><br></pre></td></tr></table></figure><p>但和<a href="https://www.liuyude.com/How_to_make_your_HEXO_blog_support_handwriting_flowchart.html" target="_blank" rel="noopener">这位老哥</a>发现的问题一样，插件安装成功后未在<code>_config.yml</code>中配置也能直接使用，这一点挺神奇的！</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>由于这个<code>hexo-filter-flowchart</code>插件基于<code>flowchart.js</code>，实际上使用的是后者的语法<code>name=&gt;type: content:&gt;url</code>。其中，</p><ul><li><strong>name</strong>为元素的名称；</li><li><strong>type</strong>为元素所在的流程类型，包括：<ul><li>start，</li><li>end，</li><li>operation，</li><li>subroutine，</li><li>condition，</li><li>input/output，</li><li>parallel；</li></ul></li><li><strong>content</strong>为文本内容(自定义)；</li><li><strong>url</strong>为文本中随附的链接。</li></ul><p>比如插件作者给出的这个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">\&#96;\&#96;\&#96;flow# 使用时删去&#39;\&#39;符号</span><br><span class="line">st&#x3D;&gt;start: Start|past:&gt;</span><br><span class="line">e&#x3D;&gt;end: End:&gt;https:&#x2F;&#x2F;github.com&#x2F;bubkoo&#x2F;hexo-filter-flowchart</span><br><span class="line">op1&#x3D;&gt;operation: My Operation|past</span><br><span class="line">op2&#x3D;&gt;operation: Stuff|current</span><br><span class="line">sub1&#x3D;&gt;subroutine: My Subroutine|invalid</span><br><span class="line">cond&#x3D;&gt;condition: Yes</span><br><span class="line">or No?|approved:&gt;https:&#x2F;&#x2F;github.com&#x2F;bubkoo&#x2F;hexo-filter-flowchart</span><br><span class="line">c2&#x3D;&gt;condition: Good idea|rejected</span><br><span class="line">io&#x3D;&gt;inputoutput: catch something...|request</span><br><span class="line"></span><br><span class="line">st-&gt;op1(right)-&gt;cond</span><br><span class="line">cond(yes, right)-&gt;c2</span><br><span class="line">cond(no)-&gt;sub1(left)-&gt;op1</span><br><span class="line">c2(yes)-&gt;io-&gt;e</span><br><span class="line">c2(no)-&gt;op2-&gt;e</span><br><span class="line">\&#96;\&#96;\&#96;# 使用时删去&#39;\&#39;符号</span><br></pre></td></tr></table></figure><p>效果如下：</p><div id="flowchart-0" class="flow-chart"></div><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: Start|past:>e=>end: End:>https://github.com/bubkoo/hexo-filter-flowchartop1=>operation: My Operation|pastop2=>operation: Stuff|currentsub1=>subroutine: My Subroutine|invalidcond=>condition: Yesor No?|approved:>https://github.com/bubkoo/hexo-filter-flowchartc2=>condition: Good idea|rejectedio=>inputoutput: catch something...|requestst->op1(right)->condcond(yes, right)->c2cond(no)->sub1(left)->op1c2(yes)->io->ec2(no)->op2->e</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;http://xxx/aplayer.min.css&quot;&gt;&lt;script src=&quot;http://xxx/aplayer.min.js&quot; clas
      
    
    </summary>
    
    
      <category term="Markdown" scheme="https://CallMeMengMeng.github.io/categories/Markdown/"/>
    
    
      <category term="Blogs" scheme="https://CallMeMengMeng.github.io/tags/Blogs/"/>
    
      <category term="Markdown" scheme="https://CallMeMengMeng.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>从一个折腾走向另一个折腾</title>
    <link href="https://callmemengmeng.github.io/2020/04/08/%E4%BB%8E%E4%B8%80%E4%B8%AA%E6%8A%98%E8%85%BE%E8%B5%B0%E5%90%91%E5%8F%A6%E4%B8%80%E4%B8%AA%E6%8A%98%E8%85%BE/"/>
    <id>https://callmemengmeng.github.io/2020/04/08/%E4%BB%8E%E4%B8%80%E4%B8%AA%E6%8A%98%E8%85%BE%E8%B5%B0%E5%90%91%E5%8F%A6%E4%B8%80%E4%B8%AA%E6%8A%98%E8%85%BE/</id>
    <published>2020-04-08T12:50:11.000Z</published>
    <updated>2020-04-09T01:59:19.040Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><hr><p><center><font face="楷体" size="2" color="gray">“人生就是从一个折腾走向另一个折腾。”——Reyes Meng</font></center></p><p>也不知搭错哪根筋，本小子突发奇想揍性大发就要再倒腾倒腾这小破站。其实颠来倒去就一件事儿，从去年配置好<a href="https://hexo.io/zh-cn/index.html" target="_blank" rel="noopener">HEXO</a>苟到今日，有些文章涉及人员指向性略强得考虑给加加密啊。这才有了傍晚前的一通倒腾。有道是知己知彼方能百战不殆，故出恭时手也没闲着放狗搜相关技术贴子，搭眼一瞧这博文加密有现成轮子可用，节省不少体力！</p><h3 id="文章加密"><a href="#文章加密" class="headerlink" title="文章加密"></a>文章加密</h3><p>我的需求很简单只用实现某篇文章输入密码可见即可，HEXO官方插件库中有一款<code>hexo-blog-encrypt</code><a href="https://github.com/MikeCoder/hexo-blog-encrypt" target="_blank" rel="noopener">插件</a>完美契合，且其安装配置和使用都很方便。</p><h4 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h4><p>鉴于本小子暂时还处在盗版<em>Win10</em>的穷学生时代，并不清楚其他<del>(单纯指Mac)</del>平台的安装方式，故下面所有操作均基于<em>Win + Git Bash + npm</em>环境。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-blog-encrypt --save</span><br></pre></td></tr></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>插件下载成功后需要修改HEXO的<code>_config.yml</code>文件，注意不是所使用主题的<code>_config.yml</code>文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">## hexo-blog-encrypt</span><br><span class="line">encrypt:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>设置成功后，打开需要加密的文章，在其头部添加如下内容即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: The title of your article</span><br><span class="line">tags: Tags of your article</span><br><span class="line">date: Dates of your writing</span><br><span class="line">password: ReyesMeng</span><br><span class="line">abstract: Here&#39;s something encrypted, password is required to continue reading.</span><br><span class="line">message: Hey, password is required here.</span><br><span class="line">wrong_pass_message: Oh, this is an invalid password. Check and try again, please.</span><br><span class="line">---</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;http://xxx/aplayer.min.css&quot;&gt;&lt;script src=&quot;http://xxx/aplayer.min.js&quot; clas
      
    
    </summary>
    
    
      <category term="Blogs" scheme="https://CallMeMengMeng.github.io/categories/Blogs/"/>
    
    
      <category term="Blogs" scheme="https://CallMeMengMeng.github.io/tags/Blogs/"/>
    
  </entry>
  
  <entry>
    <title>汇编？不会编？会不汇编？</title>
    <link href="https://callmemengmeng.github.io/2020/04/07/%E6%B1%87%E7%BC%96%EF%BC%9F%E4%B8%8D%E4%BC%9A%E7%BC%96%EF%BC%9F%E4%BC%9A%E4%B8%8D%E6%B1%87%E7%BC%96%EF%BC%9F/"/>
    <id>https://callmemengmeng.github.io/2020/04/07/%E6%B1%87%E7%BC%96%EF%BC%9F%E4%B8%8D%E4%BC%9A%E7%BC%96%EF%BC%9F%E4%BC%9A%E4%B8%8D%E6%B1%87%E7%BC%96%EF%BC%9F/</id>
    <published>2020-04-07T15:12:31.000Z</published>
    <updated>2020-04-11T12:11:17.088Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><blockquote><p>由于某些原因，本小子开始从头学习<a href="http://www.tup.tsinghua.edu.cn/booksCenter/book_03735601.html" target="_blank" rel="noopener">《微机原理与接口技术》</a>这门课，为了尽快熟悉汇编语言，遂连续两星期坚持每天动手写几个小程序练手，获益良多。最近两天遇到两道较有意思的题目，简单整理以记之。</p></blockquote><h2 id="SHR-ADD实现简单乘法"><a href="#SHR-ADD实现简单乘法" class="headerlink" title="SHR+ADD实现简单乘法"></a>SHR+ADD实现简单乘法</h2><p>首先需要明确的是，将一个二进制数左移一位相当于扩大两倍，右移一位相当于缩小为原来的二分之一。这点很好理解：<br>$$0001(B)=01(H)\stackrel{左移1位}\rightarrow0010(B)=02(H)$$ $$1000(B)=08(H)\stackrel{右移1位}\rightarrow0100(B)=04(H)$$<br>题目来源很有意思，有一位来自<a href="https://en.duzce.edu.tr/" target="_blank" rel="noopener">Düzce University</a>的同鞋私信给我这道题寻求帮助，本小子当时内心惶恐(<del>其实我是新手啊</del>)，细看之后发觉我在中科大的一份PPT上看到过类似题目。题目如下：<br><img src="/2020/04/07/%E6%B1%87%E7%BC%96%EF%BC%9F%E4%B8%8D%E4%BC%9A%E7%BC%96%EF%BC%9F%E4%BC%9A%E4%B8%8D%E6%B1%87%E7%BC%96%EF%BC%9F/question1.jpg" alt="Question1" title="Question1"><br>不多废话，直接上代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CODESEGMENT</span><br><span class="line">ASSUMECS:CODE</span><br><span class="line">START:MOV AL,02H</span><br><span class="line">MOV BL,AL</span><br><span class="line">MOV CL,AL</span><br><span class="line">SHL CL,1    ; 02H*2</span><br><span class="line">SHL BL,3    ; 02H*8</span><br><span class="line">ADD BL,CL   ; 02H*(2+8)</span><br><span class="line">SHL AL,4    ; 02H*16</span><br><span class="line">ADD BL,AL   ; 02H*(2+8+16)&#x3D;02H*26</span><br><span class="line"></span><br><span class="line">MOV AH,4CH</span><br><span class="line">INT 21H</span><br><span class="line">CODEENDS</span><br><span class="line">END START</span><br></pre></td></tr></table></figure><h2 id="利用中断进行输入输出"><a href="#利用中断进行输入输出" class="headerlink" title="利用中断进行输入输出"></a>利用中断进行输入输出</h2><p>我遇到的题目大都是使用21H中断实现输入输出，其大致步骤分为：</p><ul><li>将系统功能号送<code>AH</code>中；</li><li>将入口参数送达指定寄存器；</li><li>使用<code>INT 21H</code>执行功能调用。</li></ul><p>而汇编中常用到的21H系统功能号及其参数如下表<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>：</p><table><thead><tr><th align="center"><code>AH</code></th><th align="center">功能</th><th align="center">入口参数</th><th align="center">出口参数</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">键盘输入一个字符到<code>AL</code>中</td><td align="center">无</td><td align="center"><code>AL</code>(字符)</td></tr><tr><td align="center">2</td><td align="center">输出<code>DL</code>寄存器的字符到显示器</td><td align="center"><code>DL</code>(存放一个字符)</td><td align="center">无</td></tr><tr><td align="center">9</td><td align="center">输出一个以’$’结尾的字符串到显示器</td><td align="center"><code>DS</code>(字符串所在的段地址)、<code>DX</code>(字符串的首地址)</td><td align="center">无</td></tr><tr><td align="center">0AH</td><td align="center">从键盘输入一个字符串到指定的缓冲区</td><td align="center"><code>DS</code>(缓冲区所在的段地址)、<code>DX</code>(缓冲区的首地址)</td><td align="center">缓冲区位置</td></tr><tr><td align="center">4CH</td><td align="center">返回DOS</td><td align="center">无</td><td align="center">无</td></tr></tbody></table><p>更详细的<code>INT 21H</code>功能参数可以参考<a href="https://www.cnblogs.com/ynwlgh/archive/2011/12/12/2285017.html" target="_blank" rel="noopener">此表</a>。</p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>编写一个子程序嵌套的结构的程序模块，分别从键盘输入姓名以及8个字符的电话号码，并以一定的格式显示出来。</p><ul><li>主程序<code>TELIST</code>:<ul><li>显示提示符<code>INPUT NAME:</code></li><li>调用子程序<code>INPUT_NAME</code>输入姓名</li><li>显示提示符<code>INPUT A TELEPHONE NUMBER:</code></li><li>调用子程序<code>INPHONE</code>输入电话号码</li><li>调用子程序<code>PRINTLINE</code>显示姓名和号码</li></ul></li><li>子程序<code>INPUT_NAME</code><ul><li>调用键盘输入子程序<code>GETNAME</code>把输入的姓名存入<code>INBUF</code>缓冲区</li></ul></li><li>子程序<code>INPHONE</code><ul><li>调用键盘输入子程序<code>GETPHONE</code>把输入的电话号码放入<code>INBUF</code>缓冲区</li></ul></li><li>子程序<code>PRINTLINE</code><ul><li>显示姓名以及电话号码，格式为：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NAME                    TEL</span><br><span class="line">XXXXXX                  XXXXXXXX</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="流程图分析"><a href="#流程图分析" class="headerlink" title="流程图分析"></a>流程图分析</h3><p>要实现电话本效果，根据题目描述可以将整个程序划分为五块内容，为“START”、“TELIST”、“INPUT_NAME”、“INPHONE”和“PRINTLINE”，分别画其流程图。<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p><h4 id="START程序"><a href="#START程序" class="headerlink" title="START程序"></a>START程序</h4><p><img src="/2020/04/07/%E6%B1%87%E7%BC%96%EF%BC%9F%E4%B8%8D%E4%BC%9A%E7%BC%96%EF%BC%9F%E4%BC%9A%E4%B8%8D%E6%B1%87%E7%BC%96%EF%BC%9F/START.png" alt="START" title="START"></p><h4 id="TELIST程序"><a href="#TELIST程序" class="headerlink" title="TELIST程序"></a>TELIST程序</h4><p><img src="/2020/04/07/%E6%B1%87%E7%BC%96%EF%BC%9F%E4%B8%8D%E4%BC%9A%E7%BC%96%EF%BC%9F%E4%BC%9A%E4%B8%8D%E6%B1%87%E7%BC%96%EF%BC%9F/TELIST.png" alt="TELIST" title="TELIST"></p><h4 id="INPUT-NAME子程序"><a href="#INPUT-NAME子程序" class="headerlink" title="INPUT_NAME子程序"></a>INPUT_NAME子程序</h4><p><img src="/2020/04/07/%E6%B1%87%E7%BC%96%EF%BC%9F%E4%B8%8D%E4%BC%9A%E7%BC%96%EF%BC%9F%E4%BC%9A%E4%B8%8D%E6%B1%87%E7%BC%96%EF%BC%9F/INPUT_NAME.png" alt="INPUT_NAME" title="INPUT_NAME"></p><h4 id="INPHONE子程序"><a href="#INPHONE子程序" class="headerlink" title="INPHONE子程序"></a>INPHONE子程序</h4><p><img src="/2020/04/07/%E6%B1%87%E7%BC%96%EF%BC%9F%E4%B8%8D%E4%BC%9A%E7%BC%96%EF%BC%9F%E4%BC%9A%E4%B8%8D%E6%B1%87%E7%BC%96%EF%BC%9F/INPHONE.png" alt="INPHONE" title="INPHONE"></p><h4 id="PRINTLINE子程序"><a href="#PRINTLINE子程序" class="headerlink" title="PRINTLINE子程序"></a>PRINTLINE子程序</h4><p><img src="/2020/04/07/%E6%B1%87%E7%BC%96%EF%BC%9F%E4%B8%8D%E4%BC%9A%E7%BC%96%EF%BC%9F%E4%BC%9A%E4%B8%8D%E6%B1%87%E7%BC%96%EF%BC%9F/PRINTLINE.png" alt="PRINTLINE" title="PRINTLINE"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><details><summary>点击查看代码</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">; ENVIRONMENT: EMU8086</span><br><span class="line"></span><br><span class="line">DATASEGMENT</span><br><span class="line">NAMEINPUTINFODB&#39;PLEASE INPUT NAME: $&#39;</span><br><span class="line">PHONEINPUTINFODB&#39;INPUT THE TELEPHONE NUMBER: $&#39;</span><br><span class="line">ERRORINFODB0DH,0AH,&#39;THE NUMBER YOU INPUT SHOULD BETWEEN 0-9 OR * OR # !$&#39;</span><br><span class="line">NAMEWARNINFODB0DH,0AH,&#39;LENGTH OF NAME CANNOT LONGER THAN 8 CHARACTERS!&#39;,0DH,0AH,&#39;$&#39;</span><br><span class="line">OUTPUTINFODB0DH,0AH,&#39;NAME                    TEL&#39;,0DH,0AH,&#39;$&#39;</span><br><span class="line">INBUFDB32 DUP(0)</span><br><span class="line">TOTALLENDW0</span><br><span class="line">DATAENDS</span><br><span class="line"></span><br><span class="line">STACKSEGMENTPARASTACK&#39;STACK&#39;</span><br><span class="line">DB100HDUP(0)</span><br><span class="line">STACKENDS</span><br><span class="line"></span><br><span class="line">CODESEGMENT</span><br><span class="line">ASSUMEDS:DATA,CS:CODE</span><br><span class="line">START:MOV AX,DATA</span><br><span class="line">MOV DS,AX</span><br><span class="line">MOV ES,AX</span><br><span class="line">CALL TELIST</span><br><span class="line"></span><br><span class="line">QUIT:MOV AH,4CH</span><br><span class="line">INT 21H</span><br><span class="line"></span><br><span class="line">TELIST PROC NEAR</span><br><span class="line">MOV AH,09H</span><br><span class="line">MOV DX,OFFSET NAMEINPUTINFO</span><br><span class="line">INT 21H</span><br><span class="line">CALL INPUT_NAME</span><br><span class="line"></span><br><span class="line">MOV AH,09H</span><br><span class="line">MOV DX,OFFSET PHONEINPUTINFO</span><br><span class="line">INT 21H</span><br><span class="line">CALL INPHONE</span><br><span class="line"></span><br><span class="line">CALL PRINTLINE</span><br><span class="line">RET</span><br><span class="line">TELISTENDP</span><br><span class="line"></span><br><span class="line">INPUT_NAME PROC NEAR</span><br><span class="line">MOV SI,0</span><br><span class="line">MOV AH,01H</span><br><span class="line">GETNAME: CMP SI,10H</span><br><span class="line">JZNAME_WARNING</span><br><span class="line">INT 21H</span><br><span class="line">CMP AL,0DH</span><br><span class="line">JZQUIT_INPUT</span><br><span class="line">MOV INBUF[SI],AL</span><br><span class="line">INC SI</span><br><span class="line">JMP GETNAME</span><br><span class="line">NAME_WARNING: MOV AH,09H</span><br><span class="line">MOV DX,OFFSET NAMEWARNINFO</span><br><span class="line">INT 21H</span><br><span class="line">QUIT_INPUT: MOV TOTALLEN,SI</span><br><span class="line">RET</span><br><span class="line">INPUT_NAME ENDP</span><br><span class="line"></span><br><span class="line">INPHONE PROC NEAR</span><br><span class="line">MOV SI,TOTALLEN</span><br><span class="line">MOV CX,18H; THERE SHOULD BE 8 UNITS BETWEEN NAME STRING (16 CHARACTERS) AND </span><br><span class="line">SUB CX,SI; PHONE ARRAY (8 NUMBERS), BUT I WANNA FILLING ALL THE UNITS  WHICH </span><br><span class="line">FILLIN:MOV INBUF[SI],&#39; &#39;; START AFTER THE LAST CHARACTER AND END BEFORE THE FIRST NUMBER WITH </span><br><span class="line">INC SI; &#39;SPACE&#39;.</span><br><span class="line">LOOP FILLIN</span><br><span class="line"></span><br><span class="line">MOV CX,08H</span><br><span class="line">MOV AH,01H</span><br><span class="line">GETPHONE: INT 21H</span><br><span class="line">CMP AL,23H</span><br><span class="line">JZSTORE</span><br><span class="line">CMP AL,2AH</span><br><span class="line">JZSTORE</span><br><span class="line">CMP AL,30H</span><br><span class="line">JLERRORINPUT</span><br><span class="line">CMP AL,39H</span><br><span class="line">JG ERRORINPUT</span><br><span class="line">STORE:MOV INBUF[SI],AL</span><br><span class="line">INC SI</span><br><span class="line">LOOP GETPHONE</span><br><span class="line">MOV TOTALLEN,SI</span><br><span class="line">RET</span><br><span class="line">ERRORINPUT: MOV AH,09H</span><br><span class="line">MOV DX,OFFSET ERRORINFO</span><br><span class="line">INT 21H</span><br><span class="line">JMP QUIT_INPUT</span><br><span class="line">INPHONEENDP</span><br><span class="line"></span><br><span class="line">PRINTLINE PROC NEAR</span><br><span class="line">MOV AH,09H</span><br><span class="line">MOV DX,OFFSET OUTPUTINFO</span><br><span class="line">INT 21H</span><br><span class="line">MOV SI,TOTALLEN</span><br><span class="line">MOV INBUF[SI],&#39;$&#39;</span><br><span class="line">MOV AH,09H</span><br><span class="line">MOV DX,OFFSET INBUF</span><br><span class="line">INT 21H</span><br><span class="line">RET</span><br><span class="line">PRINTLINE ENDP</span><br><span class="line"></span><br><span class="line">CODEENDS</span><br><span class="line">ENDSTART</span><br></pre></td></tr></table></figure></details><h3 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h3><h4 id="姓名输入运行效果"><a href="#姓名输入运行效果" class="headerlink" title="姓名输入运行效果"></a>姓名输入运行效果</h4><p><img src="/2020/04/07/%E6%B1%87%E7%BC%96%EF%BC%9F%E4%B8%8D%E4%BC%9A%E7%BC%96%EF%BC%9F%E4%BC%9A%E4%B8%8D%E6%B1%87%E7%BC%96%EF%BC%9F/name.jpg" alt="name" title="NAME"></p><h4 id="号码输入及显示效果"><a href="#号码输入及显示效果" class="headerlink" title="号码输入及显示效果"></a>号码输入及显示效果</h4><p><img src="/2020/04/07/%E6%B1%87%E7%BC%96%EF%BC%9F%E4%B8%8D%E4%BC%9A%E7%BC%96%EF%BC%9F%E4%BC%9A%E4%B8%8D%E6%B1%87%E7%BC%96%EF%BC%9F/phone.jpg" alt="phone" title="PHONE"></p><h4 id="异常输入效果"><a href="#异常输入效果" class="headerlink" title="异常输入效果"></a>异常输入效果</h4><p><img src="/2020/04/07/%E6%B1%87%E7%BC%96%EF%BC%9F%E4%B8%8D%E4%BC%9A%E7%BC%96%EF%BC%9F%E4%BC%9A%E4%B8%8D%E6%B1%87%E7%BC%96%EF%BC%9F/ErrorMessage.jpg" alt="name" title="ErrorMessage"></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">参考博文：<a href="https://blog.csdn.net/u013007900/article/details/50268467" target="_blank" rel="noopener">汇编 DOS的中断调用 INT 21H</a>.</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">分析思路参考<a href="http://forec.cn" target="_blank" rel="noopener">@Forec</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;http://xxx/aplayer.min.css&quot;&gt;&lt;script src=&quot;http://xxx/aplayer.min.js&quot; clas
      
    
    </summary>
    
    
      <category term="Blogs" scheme="https://CallMeMengMeng.github.io/categories/Blogs/"/>
    
      <category term="汇编" scheme="https://CallMeMengMeng.github.io/categories/Blogs/%E6%B1%87%E7%BC%96/"/>
    
    
      <category term="Blogs" scheme="https://CallMeMengMeng.github.io/tags/Blogs/"/>
    
      <category term="汇编" scheme="https://CallMeMengMeng.github.io/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>译·小肥皂单挑众病毒</title>
    <link href="https://callmemengmeng.github.io/2020/03/30/Soap-annihilates-the-virus/"/>
    <id>https://callmemengmeng.github.io/2020/03/30/Soap-annihilates-the-virus/</id>
    <published>2020-03-30T13:48:39.000Z</published>
    <updated>2020-04-14T04:36:25.825Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><hr><p><center><font face="Times New Roman" size="3" color="gray">WARNING</font></center><font face="楷体" size="2" color="gray">本文由<a href="https://callmemengmeng.github.io/"><i>Reyes Meng</i></a>译自<b>VOX</b>网站的<a href="https://www.vox.com/science-and-health/2020/3/11/21173187/coronavirus-covid-19-hand-washing-sanitizer-compared-soap-is-dope?utm_campaign=vox.social&utm_content=voxdotcom&utm_medium=social&utm_source=youtube" target="_blank" rel="noopener"><i>How soap absolutely annihilates the coronavirus</i></a>一文，仅供学习交流，禁止任何商业用途。</font></p><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>近几个月冠状病毒在全球范围内肆虐，各国医疗部门均积极响应，高速运转抗击疫情。宅家持续追踪各国新闻发现，即使信仰、国家、政党不相同，但医疗部门向其国民宣传的预防措施中均包括“要勤洗手”的共同观点。在我看来，只是简单的流水洗手预防病毒并不确切，洗手过程中会使用到的肥皂或具有表面活性物质的其他清洁用品才是关键。为此本小子向一位相关专业的童鞋咨询了自己的观点，之后在放狗查资料时发现<a href="http://www.chemistry.unsw.edu.au/staff/pall-thordarson" target="_blank" rel="noopener">Palli Thordarson教授</a>在社交平台上介绍过油滴和冠状病毒结构的相似性，而<strong>VOX</strong>网站恰好发布了这篇关于肥皂如何杀死病毒的文章，便翻译于此，仅作科普学习之用。</p><h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p><center><font face="楷体" size="2" color="gray">肥皂破坏了病毒结构，流水带走了残留物。—— <b>VOX</b></font></center></p><p>就在<strong>COVID-19</strong>在全球掀起巨浪的当下，有这么一款消费级产品对我们打赢这场“压扁曲线，减缓蔓延”战争至关重要——<strong>肥皂</strong>——那谦逊、古朴、平价却十分有效的肥皂。</p><p>呼吸道病毒，比如新型冠状病毒、流感病毒和普通感冒病毒等都可通过我们的手来传播。患者不可避免会接触到鼻涕等含有病毒的粘液，于是病毒颗粒便附着于手上。而对正常人而言，此时双手便成为病毒传染的陷阱。我们可能接触到一些含有病毒的液滴，它们残留在手上后，如果我们用手触碰面部的话，病毒就有了可趁之机进入人体。</p><p>所以我们的双手就是抗击病毒的前线。<a href="https://www.cdc.gov/" target="_blank" rel="noopener">CDC</a>建议使用肥皂洗手作为手部清洁的首选，如果实在找不到肥皂和水源的话，使用酒精含量$\geq60%$的消毒剂也可以。然而新闻报道称人们大量采购囤积消毒剂，直接导致其售价剧增着实荒唐。在你工作或生活的地方没有洗手池可用时酒精含量$\geq60%$的洗手液确实是不错的选择，但如今没有配备洗手间的工作或生活设施实在太过稀少。</p><p>消毒剂可以看成是肥皂现代化、科学化、临床化的升级版，但其实任何种类的(液体的、固体的、郁金香味道的、男\女性专用的)肥皂都十分见效。毕竟使用肥皂洗手时，不只是搓掉病毒用水冲走这么简单，实际是灭活病毒使之无害。正如<a href="http://www.chemistry.unsw.edu.au/staff/pall-thordarson" target="_blank" rel="noopener">Palli Thordarson教授</a>所言，<strong>肥皂就像是一个拆迁队，它毁掉一个建筑，并清走所有的砖瓦</strong>。</p><h2 id="什么是肥皂"><a href="#什么是肥皂" class="headerlink" title="什么是肥皂"></a>什么是肥皂</h2><p>肥皂是“<a href="https://en.wikipedia.org/wiki/Amphiphile" target="_blank" rel="noopener">两亲性</a>”在实际生活中的应用。两亲分子具有两种属性：其中一端与水分子相互吸引，与油脂相互排斥，而另一端则与油脂相互吸引，与水相互排斥。仔细查看配料表会发现，常见肥皂中多含有“月桂基硫酸钠”，这是一种常用添加剂，确保肥皂既能去污清洁又不伤害皮肤。</p><p>正是这种两亲性化学结构使得肥皂如此见效。我们买到的任何一块都是各种两性分子的混合物，它们都具有相同的能力。</p><p><img src="http://a0.att.hudong.com/28/11/01000000000000119081137899128.jpg" alt="两亲分子" title="两亲分子"></p><p>回忆我们将食用油倒入水中的情景。由于油脂不溶于水，这些油滴聚成一团浮在水中。但向其中溶解一些肥皂后，油滴就逐渐消散了，出现这一现象的原因是肥皂分子的疏水端和油脂相互吸引，包围油脂颗粒使之相互分离，最终撕碎它们并通过亲水端将油脂残骸拉入水中，这是一套组合拳。</p><p>幸运的是，冠状病毒结构有些类似上面提到的油脂：其由RNA编码而来的遗传物质被脂质-蛋白质外衣包裹着。Palli Thordarson教授戏称其为“纳米级油脂球”。既然是油脂球，无论大小，都可以被肥皂摧毁。</p><h2 id="肥皂如何摧毁病毒"><a href="#肥皂如何摧毁病毒" class="headerlink" title="肥皂如何摧毁病毒"></a>肥皂如何摧毁病毒</h2><p>与油脂反应过程相同，肥皂就像一根撬棍，它撬开病毒外壳露出所有内容物。</p><p><img src="http://news.cntv.cn/20120928/images/1348774070049_75262315.jpg" alt="冠状病毒结构" title="冠状病毒结构"></p><p>肥皂分子的疏水基深深埋入病毒的脂质-蛋白质外壳中，所幸维系病毒外壳结构的化学键并不牢固，肥皂分子得以破坏病毒外壳，将病毒拆成碎片，使之溶解在水中。之后无害的病毒碎片被水冲走。即使没能摧毁所有病毒，仍然可以借助肥皂和流水使之与其它附着的油脂、灰尘从我们手上脱离。当然，有些病毒比冠状病毒更加坚固更难碎裂，肥皂依然可以洗掉细菌以及这类病毒。</p><p>这个过程需要一些时间，这就是我们为何至少要洗手20秒钟。首先，我们的皮肤满是褶皱，肥皂分子需要一点时间才能渗入所有微小的褶皱消灭藏匿其中的病毒。其次，病毒与肥皂分子间的反应过程也需要一定的时间。我们需要等待这些微粒交互反应，二十秒钟刚刚好。</p><p>酒精，消毒剂的主要成分，也可以摧毁病毒结构，它也具有些两亲性，和肥皂分子的作用机制相似。但需要高浓度酒精才能达到相同的效果(季铵化合物——<a href="https://www.lysol.com/" target="_blank" rel="noopener">Lysol</a>的主要成分，杀死病毒的同时也会使皮肤粗糙)。</p><p>酒精含量$\geq60%$的免洗洗手液才有效果，所以在购买消毒剂、湿巾等类似产品时一定要注意那些不达标(甚至不含酒精)的西贝货。手部消毒液很有效，但它在一些情况下表现欠佳。如果你在手部沾水或汗湿的情况下使用这些消毒剂，它们会因稀释导致效用降低。当然，消毒剂也无法清理可能藏有病毒的黏性油脂。</p><p>肥皂真的很难失效，不管何种成分的肥皂都是如此，所以不必专门购买所谓的“抗菌皂”。实际上，由于缺乏证据证明其有用性，CDC建议完全跳过这类产品。当然也不需要用于洗碗或洗衣服的强力去污剂，简简单单的一块肥皂就可以，只要你给这个小家伙一点时间，它就能完它的去污工作。</p><p>综上所述，在我们倒数二十秒用肥皂洗手时，皮肤的微小褶皱中进行着纳米级的战争，肥皂蓄积能量，紧紧缠住病毒(以及灰尘和其他油脂)，英勇、残忍的将它们撕成碎片。场面比<em>《复仇者联盟》</em>更加壮烈，因为这是真实发生的场景。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>肥皂等含有两亲性分子(表面活性分子)的产品可以和冠状病毒的“油脂球”结构结合，其亲水基在外部水流的作用下破坏化学键进而撕开病毒外壳，使之溶解在水中，使病毒失活。最后，希望每个人都能养成<strong>肥皂洗手二十秒，公共场合戴口罩</strong>的习惯，抵抗病毒，保持健康。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;http://xxx/aplayer.min.css&quot;&gt;&lt;script src=&quot;http://xxx/aplayer.min.js&quot; clas
      
    
    </summary>
    
    
      <category term="Blogs" scheme="https://CallMeMengMeng.github.io/categories/Blogs/"/>
    
      <category term="翻译" scheme="https://CallMeMengMeng.github.io/categories/Blogs/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="Blogs" scheme="https://CallMeMengMeng.github.io/tags/Blogs/"/>
    
      <category term="翻译" scheme="https://CallMeMengMeng.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
</feed>
