<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ReyesMeng&#39;s Blog</title>
  
  <subtitle>Vaya con Dios.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://callmemengmeng.github.io/"/>
  <updated>2020-12-27T03:15:36.243Z</updated>
  <id>https://callmemengmeng.github.io/</id>
  
  <author>
    <name>ReyesMeng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我们只是—好久不见</title>
    <link href="https://callmemengmeng.github.io/2020/12/27/See-You-Again/"/>
    <id>https://callmemengmeng.github.io/2020/12/27/See-You-Again/</id>
    <published>2020-12-27T02:18:11.000Z</published>
    <updated>2020-12-27T03:15:36.243Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><p>从上篇更文至今相距整整五个月，这段时间只字未写，忙吗？忙。忙什么呢？去哪里忙活？这里面的事情有太多太多值得写出来了。五个月里接触到的人和事比我过去四年以来加和都多，认识了更多的人，结交了一撮新朋友，做到了很多事情，也结结实实重铸了自己的性格，有得也有舍。</p><p>我逐渐明白，经历过的事情总会在记忆的岩壁上刻下深深浅浅的印迹，纵然会慢慢淡忘，但它们总会在那里。只需等待一个契机、一个触发的媒介，那些尘封的记忆便如湖底气泡翻涌而上愈来愈大越来越清晰。</p><p>给我时间，坐下来，将缺失的时间慢慢诉诸纸上，我们只是—好久不见。</p><p><img src="/2020/12/27/See-You-Again/Aofan.jpeg" alt="Aofan" title="Aofan Center"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;http://xxx/aplayer.min.css&quot;&gt;&lt;script src=&quot;http://xxx/aplayer.min.js&quot; clas
      
    
    </summary>
    
    
      <category term="Blogs" scheme="https://CallMeMengMeng.github.io/categories/Blogs/"/>
    
    
      <category term="Blogs" scheme="https://CallMeMengMeng.github.io/tags/Blogs/"/>
    
  </entry>
  
  <entry>
    <title>五日合租记</title>
    <link href="https://callmemengmeng.github.io/2020/07/24/Roam-the-streets/"/>
    <id>https://callmemengmeng.github.io/2020/07/24/Roam-the-streets/</id>
    <published>2020-07-24T06:45:40.000Z</published>
    <updated>2020-07-24T08:13:13.617Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><hr><p>庚子之夏，七月既望，本小子终于迎来了自己人生中第五个毕业。<br><br>毕业这事儿经历的多了也就那么回事儿，同学亲友来了又去，几年时光只沉积出两页纸的厚度。记忆这东西最不靠谱，人脑毕竟受人控制，任何一段回忆都带有强烈的主观色彩，隔得时间越长，真实度与清晰度便越打折扣。再加上疫情影响，回校参加毕业典礼实际见上面的好友其实十分有限。拍了照领了证喝了酒聊了天，在经历了不痛不痒的三日喧嚣后，整栋宿舍楼再一次进入紧锣密鼓的搬家离别状态。<br><br>以往毕业本小子卷起铺盖拍拍屁股返家去也，如今距家千余公里，搬家，往哪搬啊？总不能真往家里搬吧？！宿舍里这些鸡肋的邮费往返花费基本和其本身价值齐平，弃之可惜但又必须断舍离。好在有同学提前在当地工作，又看到学校通知毕业学生最迟可于二十一日离校，本小子索性将专业书籍与棉服被褥打包发至同学住处，仅剩薄席一张，毛毯一块在学校接着钉子户。<br><br>你可能会奇怪，为啥宁愿独居在学校也不愿回家或者找个住处呢？你这是薅学校的羊毛！非也，距离月底去工作单位报道不足半月，一听是短租连中介都不愿介绍房源。考虑多日方决定采用<strong>学校宿舍+当地朋友借宿</strong>二者中继的方案。<br><br>十二号以后的宿舍楼基本空置，根据本小子的观察，我所在的楼层只剩我一个活人。四处静的啊，就如同琥珀中的气泡，时光凝结在这细碎错杂的空穴中。在宿舍的最后十几天，每日六点准时起床背单词，七点吃早饭，八点开始读一些英文专业书籍，午饭后休息半小时，下午看数学做专业题编写程序，晚饭半个小时后去操场跑三公里，洗澡睡觉。每一日都如前一日，除了逐日增加的公里数与单词量，以及堆叠的草稿纸厚度，几乎看不到时间在这屋子中的痕迹。<br><br>终于，离校日到来，本小子起了个大早，拖着所有的家当，这就乘车投奔同学去也！<br><br>根据同学发来的地址本小子按图索骥，也干出了蹲在他家楼下打电话说自己迷路找不到地方的壮举，当看到下楼接我的友人后眼泪差点混着汗珠一齐砸在人行道上。一顿手忙脚乱我俩终于抬着行李进了家门——嚯，闹市区的小套三——他们三人合租，我和朋友凑一间屋里（得有家里我房间的两倍大小）。<br><br>友人给我撇下钥匙后便同舍友匆匆出门工作，通过屋内陈设基本能看出他们工作的忙碌程度，我闲人一个，稍作整顿便动手帮友人归置归置。收拾打扫停当，这房间就完全合我习惯了，考虑到本小子一贯的活动范围，我顺手将卫生间和厨房也给收拾出来。晚上友人下班招呼我出去吃晚饭，围坐在自助烤肉桌前不禁唏嘘年龄不饶人，大一我俩一人能吃十笼蒸海鲜如今却只能望肉兴叹。<br><br>翌日大雨，本小子撑伞漫步于楼下商街，四年来是第一次到这条传说中的步行街，街面上不乏衣着光鲜的少爷小姐，呵，这就是大城市的灯红酒绿吗！余则温袍敝衣处其间，略无慕艳意，以囊中羞涩者，何以口体之奉等量齐观？今天一共两件事儿，理发，买日用品。走了大概一万步，终于让本小子找到了一家两元店，买粘蝇板以除厨房之果蝇，购空气清新剂以驱卧室之陈腐气味；兜兜转转又千步，方寻得一三福百货，只因本小子仅有这家店的会员卡，买日用品可以打折。<br><br>又一日，清晨本小子背完单词，出门摸索平价早餐店。头天晚上看了半天网站评价，如今直捣黄龙实地一看，果然份大量足价格公道。遂买了三人餐，他们工作繁忙，顺手之劳啦。顿顿下馆子不是生活该有的样子，既然厨房已经收拾出来，当然还是自己做饭更实惠放心。出门直奔超市，购得葱蒜辣椒西兰花，洋葱黄瓜腌香肠，回家葱油爆炒胡萝卜西兰花，鸡蛋辣椒配白米，下饭。<br><br>这几日的生活完全由自己掌握，可以被肆意揉捏成符合心意的形状，不必顿顿套餐，不必担心煮面跳闸，我可以利用从家里长辈手中继承学习而来的手艺复刻家的味道，这使我在陌生的街头有了一丝丝熟悉感。生活最值得过活体验的就是这股人间烟火味。<br><br>合租生活即将结束，本小子即将启程去往下一个地方，我将这五日合租生活视为独立生活前的演习，对家人、对朋友、对自己，我认为这几日的表现还算差强人意。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;http://xxx/aplayer.min.css&quot;&gt;&lt;script src=&quot;http://xxx/aplayer.min.js&quot; clas
      
    
    </summary>
    
    
      <category term="Blogs" scheme="https://CallMeMengMeng.github.io/categories/Blogs/"/>
    
    
      <category term="Blogs" scheme="https://CallMeMengMeng.github.io/tags/Blogs/"/>
    
  </entry>
  
  <entry>
    <title>空心螺线管的电感公式</title>
    <link href="https://callmemengmeng.github.io/2020/07/12/Two-Equations-of-the-solenoid/"/>
    <id>https://callmemengmeng.github.io/2020/07/12/Two-Equations-of-the-solenoid/</id>
    <published>2020-07-12T05:56:26.000Z</published>
    <updated>2020-07-12T06:40:21.850Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><hr><p>这是一篇简短的小笔记。</p><p>继宅家研读完几本微波技术与天线设计的书籍后，本小子自觉在微波射频领域刚得皮毛，遂寻找其他教参进一步学习。这两天偶得一书——<em>《RF Circuit Design: Theory and Application》</em>，其中绕开MAXWELL方程组的“场”分析方法，从低频向高频，从集总到分布，以“路”切入，娓娓道来，收获良多。</p><p>为了比较电感元件在直流电路与高频电路中的区别，书中随附例题涉及到电感$L$的计算公式。初等电路的电感公式在《大学物理》以及《电路分析》等课程中都有涉及，弱鸡如我没有记住其公式细节，遂放狗搜索，没想到此行除了电感公式外还有其他收获。</p><p>在一论坛中挖到了八年前的帖子，里面给出了一个有趣的问题，截图如下：<br><img src="/2020/07/12/Two-Equations-of-the-solenoid/post.jpg" alt="Image" title="Image"></p><p>乍眼一看，这两个公式似乎相悖，本小子特地跑去文中提到的<a href="http://en.wikipedia.org/wiki/Solenoid" target="_blank" rel="noopener">Wiki</a>和<a href="http://farside.ph.utexas.edu/teaching/em/lectures/node83.html" target="_blank" rel="noopener">Texas</a>网站取证，终于发现了其中猫腻。两个公式都是正确的，而且两个公式转化后是相同的，其表面相悖的原因在于两公式中的线圈匝数$N$定义不同：</p><ul><li>Wiki上所给公式中的匝数$N$是”… the number of turns …”，即整个空心螺线管的线圈匝数，</li><li>Texas给出的公式中$N$是”… has $N_1$ turns per unit length …”，即单位长度螺线管所含线圈的匝数，</li></ul><p>所以说，Wiki上电感公式可作进一步转化：<br>$$L=\mu_0\frac{N^2A}{l}\stackrel{N=N_1l}{=}\mu_0\frac{(N_1l)^2A}{l}=\mu_0N_1^2Al$$<br>便得到了Texas给出的电感公式。<strong>看书得细致，条件说明很重要！</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;http://xxx/aplayer.min.css&quot;&gt;&lt;script src=&quot;http://xxx/aplayer.min.js&quot; clas
      
    
    </summary>
    
    
      <category term="Blogs" scheme="https://CallMeMengMeng.github.io/categories/Blogs/"/>
    
    
      <category term="Blogs" scheme="https://CallMeMengMeng.github.io/tags/Blogs/"/>
    
  </entry>
  
  <entry>
    <title>基于8086的简单流水灯仿真设计</title>
    <link href="https://callmemengmeng.github.io/2020/06/27/Microcontroller-with-LED/"/>
    <id>https://callmemengmeng.github.io/2020/06/27/Microcontroller-with-LED/</id>
    <published>2020-06-27T10:29:20.000Z</published>
    <updated>2020-06-27T12:24:08.778Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><hr><p><center><font face="楷体" size="2" color="gray"><b>摘要</b></font></center></p><p><font face="楷体" size="2" color="gray">本文使用8086CPU作为主控芯片，选择可编程计数器8253A芯片引入计时信号，选择可编程中断控制器8259A产生中断并按照相应的中断服务子程序控制8255A可编程并行接口芯片输出控制信号，驱动电路中的8只LED产生流水灯效果。本课程设计主要包括硬件设计和软件设计，其中所有汇编代码均使用EMU8086编写，硬件电路在<a href="https://www.labcenter.com/" target="_blank" rel="noopener">Proteus7.8</a>中进行搭建仿真，仿真结果显示，本设计中程序与电路运行正常，LED会间隔相同时间后循环点亮。</font></p><h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h2><h3 id="任务分析"><a href="#任务分析" class="headerlink" title="任务分析"></a>任务分析</h3><p><font size="6">本</font>次设计是基于8086处理器的LED流水灯电路，通过CPU与总线、译码器、8只LED灯以及各接口芯片之间的配合，实现循环点亮的效果。本设计中，8086CPU的主频为1500KHz，由外部时钟频率为2MHz的8253A芯片采用两计数通道级联实现初值N为10000的计数，产生周期为0.005s的方波作为中断触发信号送入8259A中。对该中断控制芯片进行设置，在中断服务子程序对8255A芯片并行口PA输出进行定义，使得PA口八只引脚循环输出高电平从而点亮对应的LED灯。</p><p>软件代码使用汇编语言编写，并在EMU8086中编译产生可执行文件；硬件电路在Proteus7.8中搭建，配合代码中各芯片地址进行电路布线，在引入编译产生的可执行文件后对电路仿真。</p><h3 id="总体思路"><a href="#总体思路" class="headerlink" title="总体思路"></a>总体思路</h3><p>在本设计中8086CPU通过译码电路对各个接口芯片进行片选，并通过总线进行通信，设计思路框图如图所示：<br><img src="/2020/06/27/Microcontroller-with-LED/frame.png" alt="Frame" title="Frame"></p><ul><li><p>在定时模块中，笔者使用了8253A芯片的计数通道0和通道1均采用模式3（即方波发生器）产生定时信号，外部时钟频率$f_{CLK_0}=2MHz$，两计数器初值均为100。</p></li><li><p>在中断模块中，笔者对8259A芯片各控制字以及地址线进行设置，使用IR0引脚引入8253A产生的方波作为触发信号，中断服务子程序INT0的中断类型号设置为40H并使用循环移位指令ROR控制并行口的输出值。</p></li><li><p>在驱动模块中，笔者设置8255A的PA口为输出，其初值为80H以点亮LED8作为初始态，在中断子程序INT0中采用循环移动1位的方法更改PA各端口的输出电平，从而驱动PA口所接的LED灯使之循环点亮。</p></li></ul><h2 id="硬件设计"><a href="#硬件设计" class="headerlink" title="硬件设计"></a>硬件设计</h2><p>笔者在Proteus7.8软件中搭建的电路如下图所示，使用到的元件包括一片8086处理器芯片、3片74273芯片、一片8259A芯片、一片8255A芯片、一片8253A芯片、8只LED二极管和四个非门。为了方便调试8253A的输出波形，故在电路中接入一个示波器。<br><img src="/2020/06/27/Microcontroller-with-LED/circuit.png" alt="Circuit" title="Circuit"></p><p>对于8253A芯片，电路中各计数器以及控制端口的地址如下表：</p><center><table><thead><tr><th align="center">端口</th><th align="center">地址</th></tr></thead><tbody><tr><td align="center">计数器0</td><td align="center">100000B</td></tr><tr><td align="center">计数器1</td><td align="center">100010B</td></tr><tr><td align="center">计数器2</td><td align="center">100100B</td></tr><tr><td align="center">控制端口</td><td align="center">100110B</td></tr></tbody></table></center>笔者考虑设置计数器初值为10000，为了更充分体会8253A芯片的使用方式，采用两计数器级联的方式实现，即设置计数器0的外部时钟频率为$f_{CLK_0}=2MHz$，初值为100，输出的OUT0作为计数器1的外部时钟信号，接着设置计数器1的初值也为100，GATE0和GATE1引脚均接高电平，此时OUT1便可以输出周期为0.005s的连续方波信号。<p>根据上述需求，计数器0和计数器1均工作在方式3，计数初值均为100，采用二进制数表示，所以对应的控制字如下表所示：</p><center><table><thead><tr><th align="center">计数器</th><th align="center">控制字</th></tr></thead><tbody><tr><td align="center">计数器0</td><td align="center">00010110B</td></tr><tr><td align="center">计数器1</td><td align="center">01010110B</td></tr></tbody></table></center>对于8259A芯片，电路中控制端口的奇偶地址分别为10010B和10000B。设置ICW1为边沿触发，使用单片8259A并使用ICW4控制字；中断类型号即ICW2设置为40H；ICW4不使用缓冲方式，采用非特殊的全嵌套方式并且正常结束中断，上述控制字中ICW1写入偶地址，其它写入奇地址。设置中断优先级为非循环方式并发出中断结束命令，OCW2操作字写入偶地址。其命令字如下表所示。<center><table><thead><tr><th align="center">命令字</th><th align="center">数据</th></tr></thead><tbody><tr><td align="center">ICW1</td><td align="center">00010011B</td></tr><tr><td align="center">ICW2</td><td align="center">40H</td></tr><tr><td align="center">ICW4</td><td align="center">00000001B</td></tr><tr><td align="center">OCW2</td><td align="center">00100000B</td></tr></tbody></table></center>对于8055A芯片，电路中设置各端口地址如下表所示。由于设置初始状态为只有PA8输出高电平，所以要求PA口输出工作在方式0，方式选择控制字中其他位默认为0，故控制字应为80H。<center><table><thead><tr><th align="center">端口</th><th align="center">地址</th></tr></thead><tbody><tr><td align="center">PA</td><td align="center">01000B</td></tr><tr><td align="center">PB</td><td align="center">01010B</td></tr><tr><td align="center">PC</td><td align="center">01100B</td></tr><tr><td align="center">控制字</td><td align="center">01110B</td></tr></tbody></table></center><h2 id="软件设计"><a href="#软件设计" class="headerlink" title="软件设计"></a>软件设计</h2><h3 id="程序流程图"><a href="#程序流程图" class="headerlink" title="程序流程图"></a>程序流程图</h3><p>根据前面硬件电路的设计以及总体思路要求，程序主流程图以及相应的中断服务子程序INT0流程图如下所示。<br><img src="/2020/06/27/Microcontroller-with-LED/flowchart.png" alt="Flowchart" title="Flowchart"></p><h3 id="程序代码"><a href="#程序代码" class="headerlink" title="程序代码"></a>程序代码</h3><details><summary>点击查看代码</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">DATA SEGMENT </span><br><span class="line">DATA ENDS</span><br><span class="line"></span><br><span class="line">STACK SEGMENT STACK</span><br><span class="line">    ST DB 10 DUP(0)</span><br><span class="line">STACK ENDS</span><br><span class="line"></span><br><span class="line">CODE SEGMENT</span><br><span class="line">    ASSUME CS:CODE,DS:DATA,SS:STACK</span><br><span class="line">START: </span><br><span class="line">    MOV AX,DATA</span><br><span class="line">    MOV DS,AX</span><br><span class="line">    MOV DX,100110B    ;8253 INIT</span><br><span class="line">MOV AL,00010110B  ;COUNTER0,MODE3,BINARY-DIGITS</span><br><span class="line">OUT DX,AL</span><br><span class="line">      </span><br><span class="line">MOV DX,100000B    ; COUNTER0</span><br><span class="line">MOV AL,64H      ; 100</span><br><span class="line">OUT DX,AL</span><br><span class="line">      </span><br><span class="line">MOV DX,100110B    ;8253 INIT</span><br><span class="line">MOV AL,01010110B  ;COUNTER1,MODE3,BINARY-DIGITS</span><br><span class="line">OUT DX,AL</span><br><span class="line">      </span><br><span class="line">MOV DX,100010B    ; COUNTER1</span><br><span class="line">MOV AL,64H      ; 100</span><br><span class="line">OUT DX,AL      </span><br><span class="line">      </span><br><span class="line">    MOV DX,01110B      ; 8255初始化</span><br><span class="line">    MOV AL,80H      ; A口输出，方式0,B OUT,MODE 0</span><br><span class="line">    OUT DX,AX</span><br><span class="line">          </span><br><span class="line">    MOV BL,80H      ; LED0灯亮(高电平灯亮)  </span><br><span class="line">    MOV AL,BL</span><br><span class="line">    MOV DX,01000B</span><br><span class="line">    OUT DX,AL       ;PA7灯亮       </span><br><span class="line">                </span><br><span class="line">    MOV AL,13H      ; 00010011B，ICW1：边沿触发，单片，要ICW4</span><br><span class="line">    MOV DX,10000B   ; 8259地址</span><br><span class="line">    OUT DX,AL</span><br><span class="line">    MOV AL,40H      ; ICW2中断类型号为40H</span><br><span class="line">    MOV DX,10010B</span><br><span class="line">    OUT DX,AL</span><br><span class="line">    MOV AL,01H      ; ICW4不用缓冲方式，正常中断结束，非特殊的全嵌套方式</span><br><span class="line">    OUT DX,AL</span><br><span class="line">             </span><br><span class="line">    MOV AX,0 </span><br><span class="line">    MOV DS,AX       ; 数据段清零        </span><br><span class="line">          </span><br><span class="line">    LEA AX,INT0     ; 写8259中断程序的入口地址</span><br><span class="line">    MOV DS:[4*40H],AX   ; 把中断服务程序的入口地址偏移量送中断向量表</span><br><span class="line">    MOV AX,CS</span><br><span class="line">    MOV DS:[4*40H+2],AX ; 把中断服务程序的入口地址段地址送中断向量表    </span><br><span class="line"></span><br><span class="line">    STI                 ; 开中断</span><br><span class="line">AGAIN:</span><br><span class="line">    MOV DX,8000H</span><br><span class="line">    MOV AL,40H</span><br><span class="line">    OUT DX,AL</span><br><span class="line">    JMP AGAIN</span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">INT0 PROC NEAR      ; 8259中断服务程序   </span><br><span class="line">    ROR BL,1        ; 右循环1次</span><br><span class="line">    MOV AL,BL</span><br><span class="line">    MOV DX,01000B   </span><br><span class="line">    OUT DX,AL       ; PA口灯亮       </span><br><span class="line">          </span><br><span class="line">    MOV DX,10000B </span><br><span class="line">    MOV AL,20H      ; OCW2发结束命令EOI&#x3D;1</span><br><span class="line">    OUT DX,AL</span><br><span class="line">          </span><br><span class="line">    IRET</span><br><span class="line">INT0 ENDP   </span><br><span class="line">CODE ENDS</span><br><span class="line">    END START</span><br></pre></td></tr></table></figure></details><h2 id="仿真结果"><a href="#仿真结果" class="headerlink" title="仿真结果"></a>仿真结果</h2><p>汇编程序在EMU8086中成功编译，将可执行文件写入Proteus7.8软件的8086CPU中仿真后发现，8只LED灯可以被循环点亮。<br><img src="/2020/06/27/Microcontroller-with-LED/animate.gif" alt="Animation" title="Animation"></p><p>8253A计数器输出波形如下所示。<br><img src="/2020/06/27/Microcontroller-with-LED/wave.png" alt="Wave" title="Wave"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;http://xxx/aplayer.min.css&quot;&gt;&lt;script src=&quot;http://xxx/aplayer.min.js&quot; clas
      
    
    </summary>
    
    
      <category term="Blogs" scheme="https://CallMeMengMeng.github.io/categories/Blogs/"/>
    
      <category term="汇编" scheme="https://CallMeMengMeng.github.io/categories/Blogs/%E6%B1%87%E7%BC%96/"/>
    
    
      <category term="Blogs" scheme="https://CallMeMengMeng.github.io/tags/Blogs/"/>
    
      <category term="汇编" scheme="https://CallMeMengMeng.github.io/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>简单凯撒加密算法的汇编实现</title>
    <link href="https://callmemengmeng.github.io/2020/06/01/Caeser-Cryption/"/>
    <id>https://callmemengmeng.github.io/2020/06/01/Caeser-Cryption/</id>
    <published>2020-06-01T02:16:59.000Z</published>
    <updated>2020-06-01T05:18:19.272Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近刚忙完超宽带天线设计的工作，所以晚上终于能看一些有趣的学习资料<del>纵情于声色犬马之中</del>。正在本小子兴头上时，<a href="https://callmemengmeng.github.io/2020/04/07/%E6%B1%87%E7%BC%96%EF%BC%9F%E4%B8%8D%E4%BC%9A%E7%BC%96%EF%BC%9F%E4%BC%9A%E4%B8%8D%E6%B1%87%E7%BC%96%EF%BC%9F/#SHR-ADD%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E4%B9%98%E6%B3%95">上次DM我的那个土耳其小哥</a>突然发消息给我，问我能否再次帮帮忙，一激灵下早已没了兴趣，遂答应之。</p><p><img src="/2020/06/01/Caeser-Cryption/DM.jpg" alt="DM" title="DM"></p><p>依然是一道汇编题目，比起上次的题目要求稍微多了一点。题目要求意思大概是，用键盘输入五个字母(我将情景扩展到五个符号)，使用凯撒加密算法对输入的这五个符号进行加密，然后将加密结果输出到屏幕上。之后给出了提示步骤。那么，第一要义是搞清楚所谓的<strong>“凯撒加密”</strong>是什么。</p><h2 id="凯撒加密"><a href="#凯撒加密" class="headerlink" title="凯撒加密"></a>凯撒加密</h2><p>本小子没怎么接触过密码学，放狗搜了一圈儿后发现凯撒加密是将字母按字母表顺序向前或向后移动某个数目后产生相应的密文，某度百科上曰：”这个加密方法是以罗马共和时期恺撒的名字命名的，当年恺撒曾用此方法与其将军们进行联系。”</p><p>也就是说，最基础的凯撒加密算法只针对字母进行偏移更换，而非字母符号仍旧保持原样。比如我将偏移方向定为后向，偏移步长设置为<code>2</code>，此时加密规则满足：<code>A-&gt;C</code>，<code>B-&gt;D</code>，<code>Z-&gt;B</code>。</p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>了解了算法原理之后，根据题目中给出的提示可以将程序大致划分为以下几块：</p><ul><li>键盘输入5个字符，存入数据段；</li><li>对输入的字符进行凯撒加密，依次存入数据段；</li><li>将加密后的结果输出到屏幕上。</li></ul><p>为了进一步细化程序，本小子将偏移方向定为后向，偏移步长设置为2，一共加密五个字符，并添加输入提示和输出提示。这样，可以画出程序流程图如下：</p><div id="flowchart-0" class="flow-chart"></div><p>其中，使用<code>INT 21H</code>进行输入输出操作；为了方便将<code>CRYPT</code>中的内容一次性输出，考虑到<code>09H</code>输出时以<code>$</code>结束，所以在数据段中初始化时应使用<code>CRYPT DB 6 DUP(&#39;$&#39;)</code>；在加密操作部分，需要判断每次输入符号的ASCII码是否在大写或小写字母的ASCII码区域中，字母移位后还需要判断此时ASCII码是否超过了大小写字母的范围，如果超过，则需要将<code>ASCII-26</code>使其调整到字母表起始相应的位置，<em>此处<code>CMP DL,ASCII[z/Z] JA LOWERCASE/UPPERCASE</code>中使用<code>JA</code>而不能用<code>JG</code>的原因是，前者将操作数视为无符号数而后者视为有符号数，对于输入为z的情况，<code>ASCII[z]+25=93H</code>，被<code>JG</code>按有符号数比较会被判定小于<code>ASCII[z]</code>不执行减法操作直接输出对应字符<code>?</code>。</em></p><h2 id="编程实现"><a href="#编程实现" class="headerlink" title="编程实现"></a>编程实现</h2><p>按照上面的分析思路，不难写出对应功能的汇编程序如下。</p><details><summary>点击查看代码</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">; The step of Caesar encryption I chose and stored in &#39;STEP&#39; is 2, which means A-&gt;C, Z-&gt;B, a-&gt;c, z-&gt;b...</span><br><span class="line">; Encrypt letters merely, and keep other characters unchanged.   </span><br><span class="line"></span><br><span class="line">; Example: Z;Azy -&gt; B;cba</span><br><span class="line"></span><br><span class="line">DATA SEGMENT</span><br><span class="line">    MESS1 DB 0DH,0AH,&#39;PLEASE INPUT 5 LETTERS FROM YOUR KEYBOARD: $&#39;  ; Hint of input</span><br><span class="line">    MESS2 DB 0DH,0AH,&#39;THE ENCRYPTED RESULT IS: $&#39;                    ; Hint of output</span><br><span class="line">    BUFF1 DB 5 DUP(0)                                                ; Define an array to store these 5 letters you input</span><br><span class="line">    ENCRY DB 10 DUP(&#39;$&#39;)                                             ; Define another array filled with &#39;$&#39; so as to not only store encrypted content but also output easily</span><br><span class="line">    STEP EQU 2                                                       ; Define the step of Caesar encryption</span><br><span class="line">DATA ENDS</span><br><span class="line"></span><br><span class="line">STACK SEGMENT PARA STACK &#39;stack&#39;</span><br><span class="line">    DB 50 DUP(0)</span><br><span class="line">STACK ENDS</span><br><span class="line"></span><br><span class="line">CODE SEGMENT</span><br><span class="line">    ASSUME CS:CODE,DS:DATA</span><br><span class="line">START:</span><br><span class="line">    MOV AX,DATA</span><br><span class="line">    MOV DS,AX</span><br><span class="line">                                                                     ; Get the address of BUFF1</span><br><span class="line">    LEA SI,BUFF1                                                     ; Get the address of ENCRY</span><br><span class="line">    LEA DI,ENCRY                                                    </span><br><span class="line">    MOV CX,5</span><br><span class="line">                                                                     ; Output MESS1</span><br><span class="line">    MOV AH,09H</span><br><span class="line">    MOV DX,OFFSET MESS1</span><br><span class="line">    INT 21H</span><br><span class="line">                                                                     ; Letter input</span><br><span class="line">INPUT:</span><br><span class="line">    MOV AH,01H</span><br><span class="line">    INT 21H                                                          ; Move letter from AL to BUFF1</span><br><span class="line">    MOV [SI],AL</span><br><span class="line">    INC SI</span><br><span class="line">    LOOP INPUT</span><br><span class="line">    </span><br><span class="line">    LEA SI,BUFF1</span><br><span class="line">    MOV CX,5</span><br><span class="line">    </span><br><span class="line">ENCRYPT:</span><br><span class="line">    MOV DL,[SI]                                                      ; Compare BUFF[SI] with &#39;A&#39;</span><br><span class="line">    CMP DL,41H</span><br><span class="line">    JL NEXT                                                          ; If it&#39;s less, jump to NEXT</span><br><span class="line">    CMP DL,5AH                                                       ; Compare BUFF[SI] with &#39;Z&#39;</span><br><span class="line">    JLE UPPERCASE                                                    ; If it&#39;s less or equal, jump to UPPERCASE</span><br><span class="line">    CMP DL,61H                                                       ; Compare BUFF[SI] with &#39;a&#39;</span><br><span class="line">    JL NEXT</span><br><span class="line">    CMP DL,7AH                                                       ; Compare BUFF[SI] with &#39;z&#39;</span><br><span class="line">    JLE LOWERCASE                                                    ; Less or equal, jump to lowercase</span><br><span class="line">    JMP NEXT                                                         </span><br><span class="line">    </span><br><span class="line">UPPERCASE:                                                           ; Caeser encryption of uppercase letter</span><br><span class="line">    ADD DL,STEP                                                      ; Check if the encrypted result is beyond &#39;Z&#39;</span><br><span class="line">    CMP DL,5AH                                                       ; SUB 26 to make Z-&gt;B</span><br><span class="line">    JA SUB_26</span><br><span class="line">    JMP NEXT</span><br><span class="line">    </span><br><span class="line">LOWERCASE:                                                           ; Caeser encryption of lowercase letter</span><br><span class="line">    ADD DL,STEP                                                      ; Check if the encrypted result is beyond &#39;z&#39;</span><br><span class="line">    CMP DL,7AH                                                       ; SUB 26 to make z-&gt;b</span><br><span class="line">    JA SUB_26</span><br><span class="line">    JMP NEXT</span><br><span class="line">    </span><br><span class="line">SUB_26:</span><br><span class="line">    SUB DL,1AH</span><br><span class="line">                                                                     ; Store encrypted result in ENCRY</span><br><span class="line">NEXT:</span><br><span class="line">    MOV [DI],DL</span><br><span class="line">    INC DI</span><br><span class="line">    INC SI</span><br><span class="line">    DEC CX</span><br><span class="line">    JNZ ENCRYPT</span><br><span class="line">                                                                     ; Output MESS2</span><br><span class="line">OUTPUT:</span><br><span class="line">    MOV AH,09H</span><br><span class="line">    MOV DX,OFFSET MESS2</span><br><span class="line">    INT 21H                                                          ; Output encrypted content</span><br><span class="line">    </span><br><span class="line">    MOV DX,OFFSET ENCRY</span><br><span class="line">    INT 21H</span><br><span class="line">    </span><br><span class="line">EXIT:</span><br><span class="line">    MOV AH,4CH</span><br><span class="line">    INT 21H</span><br><span class="line">    </span><br><span class="line">CODE ENDS</span><br><span class="line">    END START</span><br></pre></td></tr></table></figure></details><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>在<code>EMU8086</code>中运行代码结果如下图。可以看到，对于输入的<code>Z;Axy</code>进行加密的过程为：<code>Z-&gt;B</code>，<code>;</code>保持不变，<code>A-&gt;C</code>，<code>x-&gt;z</code>，<code>y-&gt;a</code>。</p><p><img src="/2020/06/01/Caeser-Cryption/CRYPTION.jpg" alt="Crypted Content" title="Crypted Content"></p><p><strong>本程序只实现了小偏移步长的加密过程，对于其他超出26的步长的情况还需要对程序进行进一步修改！</strong><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">start=>start: 开始out1=>inputoutput: 输出"输入"提示语in1=>inputoutput: 输入字符op1=>operation: 将字符存入数据段BUFF1中con1=>condition: 五个字符是否输入完毕?op2=>operation: 从数据段取出一个字符con2=>condition: 字符是否为大写字母?op3=>operation: 字符ASCII码加2con3=>condition: 字符ASCII码是否超过'Z'?op4=>operation: ASCII码减26con4=>condition: 字符是否为小写字母?op5=>operation: 字符ASCII码加2con5=>condition: 字符ASCII码是否超过'z'?op6=>operation: 将字符存入数据段CRYPT中con6=>condition: 是否取完所有字符?out2=>inputoutput: 输出"输出"提示语out3=>inputoutput: 输出CRYPT中的内容ed=>end: 结束start->out1->in1->op1->con1con1(no,)->in1con1(yes,right)->op2->con2con2(yes)->op3->con3con3(yes,right)->op4con3(no)->op6con2(no,right)->con4con4(yes)->op5->con5con5(yes,right)->op4->op6con5(no)->op6con4(no)->op6op6->con6con6(no)->op2con6(yes)->out2->out3->ed</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;http://xxx/aplayer.min.css&quot;&gt;&lt;script src=&quot;http://xxx/aplayer.min.js&quot; clas
      
    
    </summary>
    
    
      <category term="Blogs" scheme="https://CallMeMengMeng.github.io/categories/Blogs/"/>
    
      <category term="汇编" scheme="https://CallMeMengMeng.github.io/categories/Blogs/%E6%B1%87%E7%BC%96/"/>
    
    
      <category term="Blogs" scheme="https://CallMeMengMeng.github.io/tags/Blogs/"/>
    
      <category term="汇编" scheme="https://CallMeMengMeng.github.io/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
</feed>
